week 10
Nov 20





"""
--------------------------------------题目分割线----------------------------------------------
"""
312. Burst Balloons <hard>
输入：
int[]
输出：
int

class Solution(object):
    def maxCoins(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n=len(nums)
        nums =[1]+nums+[1]
        dp=[[0 for i in range(n+2)]for j in range(n+2)]
        for i in range(n,0,-1):
            for j in range(1,n+1):
                if i>j:
                    continue
                maxi=float("-inf")
                for ind in range(i,j+1):
                    cost=nums[i-1]*nums[ind]*nums[j+1]+dp[i][ind-1]+dp[ind+1][j]
                    maxi=max(maxi,cost)
                dp[i][j]=maxi
        return dp[1][n]        

效果：
Runtime: 4970 ms, faster than 82.86% of Python online submissions for Burst Balloons.
Memory Usage: 15.3 MB, less than 79.05% of Python online submissions for Burst Balloons.

reference:
https://leetcode.com/problems/burst-balloons/discuss/892552/For-those-who-are-not-able-to-understand-any-solution-WITH-DIAGRAM
https://leetcode.com/problems/burst-balloons/discuss/2512188/Best-Solution-or-Easy-Approch-from-Scratch


"""
--------------------------------------题目分割线----------------------------------------------
"""
1000. Minimum Cost to Merge Stones <hard>
输入：
int[]
int
输出：
int

class Solution(object):
    def mergeStones(self, stones, k):
        """
        :type stones: List[int]
        :type k: int
        :rtype: int
        """
        n = len(stones)
        if (n - 1) % (k - 1): 
            return -1
        prefix = [0] * (n + 1)
        for i in range(n):
            prefix[i + 1] = prefix[i] + stones[i]
        
        def dp(i, j):
            if j - i + 1 < k: #if interval can not be merged yet
                return 0
            res = float('inf')
            for mid in range(i, j, k-1):
                res = min(res, dp(i,mid) + dp(mid+1, j))

            if (j - i)%(k-1) == 0: #if interval can be merged
                res += prefix[j+1] - prefix[i]

            return res

        return dp(0, n-1)     

效果：

reference:
https://leetcode.com/problems/minimum-cost-to-merge-stones/discuss/2687921/2D-Dynamic-Programming-Solution-Explained-Python




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：
