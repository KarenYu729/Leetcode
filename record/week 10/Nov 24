week 10
Nov 24




"""
--------------------------------------题目分割线----------------------------------------------
"""
44. Wildcard Matching <hard>
输入：

输出：


class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        s_len = len(s) + 1  # notice the plus 1!
        p_len = len(p) + 1

        # dp[i][j] = is substring s[:i] matches p[:j] 
        # so p[:0] is empty pattern and s[:0] is empty string 
        # thats why our dp-matrix is +1 to lengths of `p` and `s`
        dp = [ [False] * p_len for _ in range(s_len) ]
        
        dp[0][0] = True  # empty substring matches empty pattern

        # pattern consisting of one or several `*` matches everything 
        # including empty string, so set `True` until first non-*
        for j in range(1, p_len):
            if p[j-1] != '*':
                break
            dp[0][j] = True
        
        # dp[i > 0][0] is left `False` because 
        # non-empty string does not match empty pattern

        # other cases
        for i in range(1, s_len):
            for j in range(1, p_len):
                if p[j-1] == '?' or s[i-1] == p[j-1]:
                    # here we check last symbols, but we store in dp result 
                    # for substrings so far, so we copy previous state from dp
                    dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    # any positive (if there is one) will be fine since `*` matches everything
                    dp[i][j] = dp[i-1][j] or dp[i][j-1]
                # left False for other cases
        
        return dp[-1][-1]     

效果：
Runtime: 755 ms, faster than 73.45% of Python online submissions for Wildcard Matching.
Memory Usage: 21.6 MB, less than 52.76% of Python online submissions for Wildcard Matching.

reference：
https://leetcode.com/problems/wildcard-matching/discuss/256025/Python-DP-with-illustration



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：



