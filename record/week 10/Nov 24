week 10
Nov 24




"""
--------------------------------------题目分割线----------------------------------------------
"""
44. Wildcard Matching <hard>
输入：
str
str
输出：
bool

class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        s_len = len(s) + 1  # notice the plus 1!
        p_len = len(p) + 1

        # dp[i][j] = is substring s[:i] matches p[:j] 
        # so p[:0] is empty pattern and s[:0] is empty string 
        # thats why our dp-matrix is +1 to lengths of `p` and `s`
        dp = [ [False] * p_len for _ in range(s_len) ]
        
        dp[0][0] = True  # empty substring matches empty pattern

        # pattern consisting of one or several `*` matches everything 
        # including empty string, so set `True` until first non-*
        for j in range(1, p_len):
            if p[j-1] != '*':
                break
            dp[0][j] = True
        
        # dp[i > 0][0] is left `False` because 
        # non-empty string does not match empty pattern

        # other cases
        for i in range(1, s_len):
            for j in range(1, p_len):
                if p[j-1] == '?' or s[i-1] == p[j-1]:
                    # here we check last symbols, but we store in dp result 
                    # for substrings so far, so we copy previous state from dp
                    dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    # any positive (if there is one) will be fine since `*` matches everything
                    dp[i][j] = dp[i-1][j] or dp[i][j-1]
                # left False for other cases
        
        return dp[-1][-1]     

效果：
Runtime: 755 ms, faster than 73.45% of Python online submissions for Wildcard Matching.
Memory Usage: 21.6 MB, less than 52.76% of Python online submissions for Wildcard Matching.

reference：
https://leetcode.com/problems/wildcard-matching/discuss/256025/Python-DP-with-illustration



"""
--------------------------------------题目分割线----------------------------------------------
"""
134. Gas Station <medium>
输入：
int
输出：
int

贪心策略:
如果所有的油量不能支持走一圈，那就直接返回-1，否则只要能够支付所有的cost，那么就一定能找到起始点。

class Solution(object):
    def canCompleteCircuit(self, gas, cost):
        """
        :type gas: List[int]
        :type cost: List[int]
        :rtype: int
        """
        if sum(gas) < sum(cost): 
            return -1
        
        start = 0
        cur_gas = 0
        for i in range(len(gas)):
            cur_gas += gas[i] - cost[i]
            if cur_gas < 0:
                start = i+1
                cur_gas = 0

        return start        

效果：
Runtime: 518 ms, faster than 99.84% of Python online submissions for Gas Station.
Memory Usage: 19.7 MB, less than 80.22% of Python online submissions for Gas Station.

reference:
https://leetcode.com/problems/gas-station/discuss/2395794/Python-Very-Simple-O(n)-Solution-with-Explanation


"""
--------------------------------------题目分割线----------------------------------------------
"""
330. Patching Array <hard>
输入：
int[]
int
输出：
int

class Solution(object):
    def minPatches(self, nums, n):
        """
        :type nums: List[int]
        :type n: int
        :rtype: int
        """
        miss, i, added = 1, 0, 0
        while miss <= n:
            if i < len(nums) and nums[i] <= miss:
                miss += nums[i]
                i += 1
            else:
                miss += miss
                added += 1
        return added        

效果：
Runtime: 46 ms, faster than 92.31% of Python online submissions for Patching Array.
Memory Usage: 13.6 MB, less than 7.69% of Python online submissions for Patching Array.

reference:
https://leetcode.com/problems/patching-array/discuss/1219891/Python-solution-faster-than-97-with-explanation
https://leetcode.com/problems/patching-array/discuss/78498/Simple-9-line-Python-Solution

you just need to figure out one thing:
if you can sum up from 1 to 10, what happen if you have another number
suppose this number is 2, then you can sum up from 1 to 12
suppose this number is 11, then you can sum up from 1 to 21
suppose this number is 12, then you can't get 11 and the consecutive sum is broken at 11
suppose this number is 100, then you can't get the sum from 11 to 99
so we know if you can sum up from 1 to k, the next largest number you can have is k+1, otherwise the consecutive sum will be invalid
traverse from left, if the current number x is lower than or equal to k+1, let k = k+x, otherwise let k = k+1(k+1 is the largest we can have to keep the sum valid)


"""
--------------------------------------题目分割线----------------------------------------------
"""
376. Wiggle Subsequence <medium>
输入：
int[]
输出：
int

class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        positive, negative = 1, 1
        
        if len(nums) < 2:
            return len(nums)
        
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                positive = negative + 1
            elif nums[i] < nums[i - 1]:
                negative = positive + 1
                
        return max(positive, negative)     

效果：
Runtime: 22 ms, faster than 90.30% of Python online submissions for Wiggle Subsequence.
Memory Usage: 13.5 MB, less than 53.94% of Python online submissions for Wiggle Subsequence.

reference:
https://leetcode.com/problems/wiggle-subsequence/discuss/2229487/PYTHON-O-(-N-)-oror-EXPLAINED-oror
https://leetcode.com/problems/wiggle-subsequence/discuss/2229573/Simple-O(n)-Solution-using-Dynamic-Programming



"""
--------------------------------------题目分割线----------------------------------------------
"""
402. Remove K Digits <medium>
输入：
str
int
输出：
str

class Solution(object):
    def removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        stack = []
        for n in num:
            while stack and k>0 and stack[-1] > n:
                stack.pop()
                k -= 1
            stack.append(n)
        while stack and k>0:
            stack.pop()
            k -= 1
        if not stack:
            return "0"
        return str(int("".join(stack)))        

效果：
Runtime: 186 ms, faster than 49.23% of Python online submissions for Remove K Digits.
Memory Usage: 14.9 MB, less than 90.38% of Python online submissions for Remove K Digits.

reference:
https://leetcode.com/problems/remove-k-digits/discuss/1779577/Beginner-friendly-JavaJavaScriptPython-Solution
https://leetcode.com/problems/remove-k-digits/discuss/700059/Python-Very-detail-explanation-with-examples-using-stack

		## APPROACH : STACK ##
        ## IDEA : 1234, k= 2 => when numbers are in increasing order we need to delete last digits 
        ## 4321 , k = 2 ==> when numbers are in decreasing order, we need to delete first digits
        ## so, we need to preserve increasing sequence and remove decreasing sequence ##
		## LOGIC ##
		#	1. First think in terms of stack
		#	2. push num into stack IF num it is greater than top of stack
		#	3. ELSE pop all elements less than num


"""
--------------------------------------题目分割线----------------------------------------------
"""
1029. Two City Scheduling <medium>
输入：
int[int[]]
输出：
int

class Solution(object):
    def twoCitySchedCost(self, costs):
        """
        :type costs: List[List[int]]
        :rtype: int
        """
        # Sort by diff
        sortedCosts = sorted(costs, key = lambda x: x[0] - x[1])
        N = len(sortedCosts) // 2
        res = 0
        # Add res from both leftmost aCosts and rightmost bCosts
        for i in range(N):
            res += sortedCosts[i][0] + sortedCosts[i + N][1]
        return res        

效果：
Runtime: 49 ms, faster than 51.15% of Python online submissions for Two City Scheduling.
Memory Usage: 13.5 MB, less than 51.66% of Python online submissions for Two City Scheduling.

reference:
https://leetcode.com/problems/two-city-scheduling/discuss/1881390/PythonGOC%2B%2B-Greedy-Solution-and-Explanations




