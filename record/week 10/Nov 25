week 10
Nov 25



"""
--------------------------------------题目分割线----------------------------------------------
"""
1090. Largest Values From Labels <medium>
输入：
int[]
int[]
int
int
输出：
int

"""
***********************解法一分割线***********************
"""
class Solution(object):
    def largestValsFromLabels(self, values, labels, numWanted, useLimit):
        """
        :type values: List[int]
        :type labels: List[int]
        :type numWanted: int
        :type useLimit: int
        :rtype: int
        """
        d = collections.defaultdict(int)
        ans = 0
        l = numWanted
        for i, j in sorted(list(zip(values, labels)), reverse = True):
            if(d[j] < useLimit and l):
                l -= 1
                d[j] += 1
                ans += i
        return ans
        
效果：
Runtime: 264 ms, faster than 65.38% of Python online submissions for Largest Values From Labels.
Memory Usage: 18.4 MB, less than 34.62% of Python online submissions for Largest Values From Labels.

reference：
https://leetcode.com/problems/largest-values-from-labels/discuss/2277331/71-TC-and-68-SC-easy-python-solution

"""
***********************解法二分割线***********************
"""
class Solution(object):
    def largestValsFromLabels(self, values, labels, numWanted, useLimit):
        """
        :type values: List[int]
        :type labels: List[int]
        :type numWanted: int
        :type useLimit: int
        :rtype: int
        """
        dic = collections.defaultdict(int)
        
        heap = []
        for i in range(len(values)):
            heap.append([-values[i], labels[i]])
            
        heapify(heap)
        arr = []
        while len(arr) < numWanted and heap:
            nodeValue, nodeLabel = heapq.heappop(heap)
            if dic[nodeLabel] < useLimit:
                arr.append(-nodeValue)
                dic[nodeLabel] += 1
        
        return sum(arr)

效果：
Runtime: 310 ms, faster than 46.15% of Python online submissions for Largest Values From Labels.
Memory Usage: 19 MB, less than 23.08% of Python online submissions for Largest Values From Labels.

reference：
https://leetcode.com/problems/largest-values-from-labels/discuss/2774024/Heap


"""
--------------------------------------题目分割线----------------------------------------------
"""
1024. Video Stitching <medium>
输入：
int[int[]]
int
输出：
int

class Solution(object):
    def videoStitching(self, clips, time):
        """
        :type clips: List[List[int]]
        :type time: int
        :rtype: int
        """
        dp = [float('inf')] * (time + 1)
        dp[0] = 0
        for i in range(1, time + 1):
            for start, end in clips:
                if start <= i <= end:
                    dp[i] = min(dp[start] + 1, dp[i])
        if dp[time] == float('inf'):
            return -1
        return dp[time]

效果：
Runtime: 60 ms, faster than 6.98% of Python online submissions for Video Stitching.
Memory Usage: 13.3 MB, less than 79.07% of Python online submissions for Video Stitching.

reference：
https://leetcode.com/problems/video-stitching/discuss/466261/Python-Short-DP-Solution-with-Explanation

Define dp(i) as the minimum number of clips needed to cover [0, i] sporting event.
We'll get the recursion below:
dp(i) = min(dp(j) + 1, dp(i)) if the clip covers [j, i] exists


"""
--------------------------------------题目分割线----------------------------------------------
"""
409. Longest Palindrome <easy>
输入：
str
输出：
int

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        cnt = Counter(s)
        odd = 0
        ans = []
        
        for num in cnt:
            ans.append(cnt[num])
            if cnt[num]%2!=0:
                odd += 1
        
        res = sum(ans)-odd+1
        
        return res if odd!=0 else res-1
    

效果：
Runtime: 30 ms, faster than 77.33% of Python online submissions for Longest Palindrome.
Memory Usage: 13.6 MB, less than 36.30% of Python online submissions for Longest Palindrome.

reference：
https://leetcode.com/problems/longest-palindrome/discuss/2832908/Python-Hash-Table-faster-than-99.88



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



效果：


reference：



