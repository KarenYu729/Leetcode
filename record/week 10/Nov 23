week 10
Nov 23



"""
--------------------------------------题目分割线----------------------------------------------
"""
39. Combination Sum <medium>
输入：
int[]
int
输出：
int[int[]]

class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        res = []
        candidates.sort()
        n = len(candidates)
        
        def backtracking(List, start_idx):
            if sum(List) == target:
                res.append(List[:])
                return
            if sum(List)>target:
                return
            
            for i in range(start_idx, n):
                List.append(candidates[i])
                backtracking(List, i)
                List.pop()
        
        backtracking([], 0)
        return res     

效果：
Runtime: 85 ms, faster than 63.61% of Python online submissions for Combination Sum.
Memory Usage: 13.5 MB, less than 68.49% of Python online submissions for Combination Sum.

reference:
https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A


"""
--------------------------------------题目分割线----------------------------------------------
"""
40. Combination Sum II <medium>
输入：
int[]
int
输出：
int[int[]]

class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        candidates.sort()
        n = len(candidates)
        res = []
        
        def backtracking(List, start_idx):
            if sum(List)>target:
                return
            if sum(List) == target:
                res.append(List[:])
                return
            
            for i in range(start_idx, n):
                if i>start_idx and candidates[i]==candidates[i-1]:
                    continue
                List.append(candidates[i])
                backtracking(List, i+1)
                List.pop()
        
        backtracking([], 0)
        return res
                    
效果：
Runtime: 92 ms, faster than 63.84% of Python online submissions for Combination Sum II.
Memory Usage: 13.6 MB, less than 36.82% of Python online submissions for Combination Sum II.

reference:
https://leetcode.com/problems/combination-sum-ii/discuss/17020/Python-easy-to-understand-backtracking-solution


"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：


