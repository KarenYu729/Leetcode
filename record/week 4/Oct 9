week 4
Oct 9

我真的会谢
中午睡觉起来发现电脑搜不到WiFi了
搜了一圈解决办法
总结
还是重启大法好用
重启了三次
电脑大概自己修复了自己



"""
--------------------------------------题目分割线----------------------------------------------
"""
463. Island Perimeter <easy>
输入：
int[int[]]
输出：
int

"""
***********************解法一分割线***********************
"""
DFS
正常思路是这样：
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        res = 0
        m,n = len(grid),len(grid[0])
        def dfs(row,col):
            nonlocal res
            res += 4
            grid[row][col] = 2
            for i,j in ((-1,0),(1,0),(0,-1),(0,1)):
                newrow,newcol = row+i,col+j
                if 0<=newrow<m and 0<=newcol<n:
                    if grid[newrow][newcol]>0:
                        res -= 1
                        if grid[newrow][newcol] == 1:
                            dfs(newrow,newcol)
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    dfs(i,j)
                    return res

但是很奇怪不能用nonlocal
SyntaxError: invalid syntax
               ^
    nonlocal res
Line 10  (Solution.py)

采取这种写法
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        row = len(grid)
        col = len(grid[0])
        
        visited = [[0 for x in range(col)] for y in range(row)]
        
        def dfs(i, j):
            # we're at a boundary node or a 0 node but we reached here
            # from a 1 node, so this "unwanted node" is a adjacent to one
            # of the wanted nodes and hence sharing the boundary (part perimeter)
            # add 1 to the perimeter here
            if i < 0 or i > row-1 or j < 0 or j > col-1 or grid[i][j] == 0:
                return 1
            
            # return if the current node is visited, we don't need
            # to count that as part of our permieter calculation
            # if not visited, mark the current node as visited,
            # this is a legit node
            if visited[i][j]:
                return 0
            visited[i][j] = 1
            
            # now recursively check all the neighbours of the current node
            return dfs(i-1, j) + dfs(i+1, j) + dfs(i, j+1) + dfs(i, j-1)
        
        # loop over all elements in the
        # matrix and as soon as you find
        # a piece of land(1); begin graph
        # traversal and we can safely return
        # here since it's going to traverse
        # the whole island and there's just 1
        for x in range(row):
            for y in range(col):
                if grid[x][y] == 1:
                    return dfs(x, y)           

效果：
Runtime: 825 ms, faster than 53.93% of Python online submissions for Island Perimeter.
Memory Usage: 17.9 MB, less than 17.86% of Python online submissions for Island Perimeter.

reference：
https://leetcode.com/problems/island-perimeter/discuss/1655746/Python-Simple-recursive-DFS-explained

更新：
有办法解决不能用nonlocal的问题：
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        res = [0]
        m,n = len(grid),len(grid[0])
        def dfs(row,col):
            res[0] += 4
            grid[row][col] = 2
            for i,j in ((-1,0),(1,0),(0,-1),(0,1)):
                newrow,newcol = row+i,col+j
                if 0<=newrow<m and 0<=newcol<n:
                    if grid[newrow][newcol]>0:
                        res[0] -= 1
                        if grid[newrow][newcol] == 1:
                            dfs(newrow,newcol)
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    dfs(i,j)
                    return res[0]
 
效果：
Runtime: 525 ms, faster than 84.11% of Python online submissions for Island Perimeter.
Memory Usage: 17.3 MB, less than 19.64% of Python online submissions for Island Perimeter.

reference：
https://leetcode.com/problems/island-perimeter/discuss/1423297/Recursive-DFS-Iterative-DFS-and-BFS-Python-Solution

"""
***********************解法二分割线***********************
"""
BFS
class Solution(object):
    def islandPerimeter(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        perimeter = [0]
        
        rows, cols = len(grid), len(grid[0])
        visited = set()
        
        
        def bfs(r, c):
            q = deque()
            visited.add((r, c))
            q.append((r, c))
            
            while q:
                row, col = q.popleft()
                direction = [(1, 0), (-1, 0), (0, 1), (0, -1)]
                
                for dr, dc in direction:
                    r, c = row+dr, col+dc
                    
                    if (r<0 or r>rows-1 or c<0 or c>cols-1):
                        perimeter[0] += 1
                        
                    elif grid[r][c] == 0:
                        perimeter[0] += 1
                        
                    elif (grid[r][c] == 1 and (r, c) not in visited):
                        visited.add((r, c))
                        q.append((r, c))
        
        
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 1 and (r, c) not in visited:
                    bfs(r, c)
                    return perimeter[0]

效果：
Runtime: 558 ms, faster than 80.36% of Python online submissions for Island Perimeter.
Memory Usage: 14.6 MB, less than 28.21% of Python online submissions for Island Perimeter.

reference：
https://leetcode.com/problems/island-perimeter/discuss/1423297/Recursive-DFS-Iterative-DFS-and-BFS-Python-Solution




















