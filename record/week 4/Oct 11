week 4
Oct 11


又回到了熟悉的图论的领域


"""
--------------------------------------题目分割线----------------------------------------------
"""
997. Find the Town Judge <easy>
输入：
int[int[]]
输出：
int

"""
***********************解法一分割线***********************
"""
class Solution(object):
    def findJudge(self, n, trust):
        """
        :type n: int
        :type trust: List[List[int]]
        :rtype: int
        """
        
        trustList = defaultdict(list)
        visited = [1]*(n+1)
        visited[0] = 0
        for a, b in trust:
            trustList[a].append(b)
        if len(trustList)!=n-1:
            return -1
        for i in trustList:
            for j in range(1,n+1):
                if j not in trustList[i]:
                    visited[j] = 0
        
        if 1 not in visited:
            return -1
        for i in range(1, len(visited)):
            if visited[i] == 1 and 1 not in visited[i+1:len(visited)]:
                return i
        
        return -1

效果：
Runtime: 2617 ms, faster than 5.01% of Python online submissions for Find the Town Judge.
Memory Usage: 18.6 MB, less than 62.17% of Python online submissions for Find the Town Judge.


"""
***********************解法二分割线***********************
"""
看一下别人的写法
class Solution(object):
    def findJudge(self, n, trust):
        """
        :type n: int
        :type trust: List[List[int]]
        :rtype: int
        """
        
        Trusted = [0] * (n+1)
        for (a, b) in trust:
            Trusted[a] -= 1
            Trusted[b] += 1
            
        for i in range(1, len(Trusted)):
            if Trusted[i] == n-1:
                return i
        return -1


效果：
Runtime: 791 ms, faster than 77.25% of Python online submissions for Find the Town Judge.
Memory Usage: 18.5 MB, less than 62.17% of Python online submissions for Find the Town Judge.




"""
--------------------------------------题目分割线----------------------------------------------
"""
841. Keys and Rooms <medium>
输入：
int[int[]]
输出：
bool

这里要注意一个问题，这是个有向图，我一开始用邻接矩阵做，然后发现一个问题，即使是所有房间的钥匙都能在其他房间找到（不存在想要进入这个房间必须进入这个房间）
但是也会出现，想进入A先进入B，想进入B先进入A的情况
如：
[[4],[3],[],[2,5,7],[1],[],[8,9],[],[],[6]]

class Solution(object):
    def canVisitAllRooms(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: bool
        """
        q = deque(rooms[0])   #deque -> doubly ended queue
        visited = defaultdict(int)
        visited[0]=1
        count = 1  #to keep a count of unique number of rooms visited
        while q:
            room = q.popleft()  #poping first element
            if room not in visited:
                visited[room] = 1
                count+=1
                q+=rooms[room]
        if count==len(rooms):
            return True
        return False

效果：
Runtime: 110 ms, faster than 20.17% of Python online submissions for Keys and Rooms.
Memory Usage: 14 MB, less than 57.10% of Python online submissions for Keys and Rooms.


一点说明：
visited = defaultdict(int)
defaultdict接受一个工厂函数作为参数，如下来构造：

dict =defaultdict( factory_function)
这个factory_function可以是list、set、str等等，作用是当key不存在时，返回的是工厂函数的默认值，比如list对应[ ]，str对应的是空字符串，set对应set( )，int对应0，如下举例：

from collections import defaultdict
 
dict1 = defaultdict(int)
dict2 = defaultdict(set)
dict3 = defaultdict(str)
dict4 = defaultdict(list)
dict1[2] ='two'
 
print(dict1[1])
print(dict2[1])
print(dict3[1])
print(dict4[1])
 
 
输出：
0
set()
 
[]
 
————————————————
版权声明：本文为CSDN博主「《一夜飘零》」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/jiaxinhong/article/details/108398099


"""
--------------------------------------题目分割线----------------------------------------------
"""
841. Keys and Rooms <medium>
输入：
str
输出：
str

class Solution(object):
    def frequencySort(self, s):
        """
        :type s: str
        :rtype: str
        """
        # Count the occurence on each character
        cnt = collections.Counter(s)

        # Build string
        res = []
        for k, v in cnt.most_common():
            res += [k] * v
        return "".join(res)

效果：
Runtime: 160 ms, faster than 28.65% of Python online submissions for Sort Characters By Frequency.
Memory Usage: 17 MB, less than 41.26% of Python online submissions for Sort Characters By Frequency.


一点说明：
cnt = collections.Counter(s)
哈希表在python中可以用collections.Counter计数来体现。
该方法用于统计某序列中每个元素出现的次数，以键值对的方式存在字典中。但类型其实是Counter。

nums = [1, 2, 3, 1, 2, 1]
counts = collections.Counter(nums)
print(counts)
## Counter({1: 3, 2: 2, 3: 1})

凭借这个结构，可以计算出某个序列中出现次数最多的某个元素。也即在得到了counts之后求max即可。但这个max需要给依据索引。

print(max(counts)) # 3，这里只是求得最大的键值
print(max(counts.keys(), key=counts.get)) # 1，这里是按照key方法求最大

这里max是两个参数，前一个代表要max的是什么，也就是要返回最大键，后面的key代表要返回的最大的依据是什么，默认是本身，但这里给了key方法，count.get也就是求值，所以该方法就是说返回一个最大键，但这个最大的依据是值。如果某个键值对的值是最大的，那就返回其键。
————————————————
版权声明：本文为CSDN博主「Wayback_」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/m0_47105444/article/details/113867636

cnt.most_common()
Counter(a)   计算a中每个元素的数量，按数量从大到小输出

import numpy as np
from collections import Counter
 
a = [2,3,1,5,4,1,1,2]
a = np.array(a)
print(Counter(a))
 
 
结果Counter({1: 3, 2: 2, 3: 1, 5: 1, 4: 1})
可以看出元素1的数量最多，有3个
 

Counter(a).most_common(1)

经过Counter()方法排列后，获取数量最多的元素及准确数量，如果most_common()的参数是2，则获取数量排在前两位的元素及具体数量

print(Counter(a).most_common(1))
结果 [(1, 3)]
print(Counter(a).most_common(2))
结果 [(1, 3), (2, 2)]
 
print(Counter(a).most_common(2)[0])#得到元素个数最多的元素及个数
输出 (1, 3)
print(Counter(a).most_common(2)[0][0])#得到元素个数最多的元素
输出 1

————————————————
版权声明：本文为CSDN博主「LiChuanxiu」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/LiChuanxiu/article/details/103479656




"""
--------------------------------------题目分割线----------------------------------------------
"""
452. Minimum Number of Arrows to Burst Balloons <medium>
输入：
int[int[]]
输出：
int

class Solution(object):
    def findMinArrowShots(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        points.sort(key=lambda p: p[1])
        
        ans, arrow = 0, 0
        for [start, end] in points:
            if ans == 0 or start > arrow:
                ans, arrow = ans + 1, end
        return ans

效果：
Runtime: 1303 ms, faster than 85.58% of Python online submissions for Minimum Number of Arrows to Burst Balloons.
Memory Usage: 62.8 MB, less than 80.63% of Python online submissions for Minimum Number of Arrows to Burst Balloons.


一点说明
关于sort
points.sort(key=lambda p: p[1])
假设我们输入的points是：
[[10,16],[2,8],[1,6],[7,12],[3,5]]
得到：
[[3, 5], [1, 6], [2, 8], [7, 12], [10, 16]]

即：按照end的位置先后排序

sort方法有两个可选参数：key和reverse

1、key在使用时必须提供一个排序过程总调用的函数：

x = ['mmm', 'mm', 'mm', 'm' ]
x.sort(key = len)
print x # ['m', 'mm', 'mm', 'mmm']
2、reverse实现降序排序，需要提供一个布尔值：

y = [3, 2, 8 ,0 , 1]
y.sort(reverse = True)
print y #[8, 3, 2, 1, 0]



"""
--------------------------------------题目分割线----------------------------------------------
"""
455. Assign Cookies <easy>
输入：
int[int[]]
输出：
int

class Solution(object):
    def findContentChildren(self, g, s):
        """
        :type g: List[int]
        :type s: List[int]
        :rtype: int
        """
        i, j, ans = 0, 0, 0
        g.sort()
        s.sort()
        while i < len(g) and j < len(s):
            if s[j] >= g[i]:
                ans, i = ans + 1, i + 1
            j += 1
        return ans

效果：
Runtime: 357 ms, faster than 23.56% of Python online submissions for Assign Cookies.
Memory Usage: 14.8 MB, less than 49.21% of Python online submissions for Assign Cookies.



"""
--------------------------------------题目分割线----------------------------------------------
"""
453. Minimum Moves to Equal Array Elements <medium>
输入：
int[]
输出：
int

是一道数学题，按照排序做铁TLE
class Solution(object):
    def minMoves(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return sum(nums) - (len(nums) * min(nums))

效果：
Runtime: 269 ms, faster than 82.99% of Python online submissions for Minimum Moves to Equal Array Elements.
Memory Usage: 14.6 MB, less than 57.14% of Python online submissions for Minimum Moves to Equal Array Elements.

题解：
https://leetcode.com/problems/minimum-moves-to-equal-array-elements/discuss/1909521/1-line-solution-beats-98-O(N)-time-and-96-O(1)-space-easy-to-understand




"""
--------------------------------------题目分割线----------------------------------------------
"""
334. Increasing Triplet Subsequence <medium>
输入：
int[]
输出：
bool

class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        first=second=float('inf')
        for i in nums:
            if i<=first:
                first=i
            elif i<=second:
                second=i
            else:
                return True
        return False

效果：
Runtime: 451 ms, faster than 99.20% of Python online submissions for Increasing Triplet Subsequence.
Memory Usage: 22.7 MB, less than 95.47% of Python online submissions for Increasing Triplet Subsequence.




"""
--------------------------------------题目分割线----------------------------------------------
"""
628. Maximum Product of Three Numbers <medium>
输入：
int[]
输出：
int

class Solution(object):
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        return max(nums[-1]*nums[-2]*nums[-3], nums[0]*nums[1]*nums[-1])

效果：
Runtime: 485 ms, faster than 30.39% of Python online submissions for Maximum Product of Three Numbers.
Memory Usage: 14.7 MB, less than 34.03% of Python online submissions for Maximum Product of Three Numbers.

这里要留意可能会有负数

比如：
[1,2,3]
[-1,-2,-3,-1]
[-1,-2,-3,4]




"""
--------------------------------------题目分割线----------------------------------------------
"""
56. Merge Intervals <medium>
输入：
int[]
输出：
int[]

class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        intervals.sort(key =lambda x: x[0])
        merged =[]
        for i in intervals:
			# if the list of merged intervals is empty 
			# or if the current interval does not overlap with the previous,
			# simply append it.
            if not merged or merged[-1][-1] < i[0]:
                merged.append(i)
			# otherwise, there is overlap,
			#so we merge the current and previous intervals.
            else:
                merged[-1][-1] = max(merged[-1][-1], i[-1])
        return merged

效果：
Runtime: 257 ms, faster than 33.07% of Python online submissions for Merge Intervals.
Memory Usage: 18.1 MB, less than 81.74% of Python online submissions for Merge Intervals.

reference：
https://leetcode.com/problems/merge-intervals/discuss/350272/Python3-Sort-O(Nlog(N))





"""
--------------------------------------题目分割线----------------------------------------------
"""
88. Merge Sorted Array <easy>
输入：
int[]
int
int[]
int
输出：
无

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        nums1[m:m+n]=nums2
        nums1.sort()

效果：
Runtime: 48 ms, faster than 28.06% of Python online submissions for Merge Sorted Array.
Memory Usage: 13.5 MB, less than 43.53% of Python online submissions for Merge Sorted Array.






"""
--------------------------------------题目分割线----------------------------------------------
"""
480. Sliding Window Median <hard>
输入：
int[]
输出：
int

import numpy as np
class Solution(object):
    def medianSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[float]
        """
        res = []
        
        for i in range(len(nums)-k+1):
            num = nums[i:i+k]
            res.append(np.median(num))
        
        return res

效果：
Runtime: 4714 ms, faster than 24.19% of Python online submissions for Sliding Window Median.
Memory Usage: 26.9 MB, less than 8.06% of Python online submissions for Sliding Window Median.

data science愣住，这竟然是hard
