week 4
Oct 11


又回到了熟悉的图论的领域


"""
--------------------------------------题目分割线----------------------------------------------
"""
997. Find the Town Judge <easy>
输入：
int[int[]]
输出：
int

"""
***********************解法一分割线***********************
"""
class Solution(object):
    def findJudge(self, n, trust):
        """
        :type n: int
        :type trust: List[List[int]]
        :rtype: int
        """
        
        trustList = defaultdict(list)
        visited = [1]*(n+1)
        visited[0] = 0
        for a, b in trust:
            trustList[a].append(b)
        if len(trustList)!=n-1:
            return -1
        for i in trustList:
            for j in range(1,n+1):
                if j not in trustList[i]:
                    visited[j] = 0
        
        if 1 not in visited:
            return -1
        for i in range(1, len(visited)):
            if visited[i] == 1 and 1 not in visited[i+1:len(visited)]:
                return i
        
        return -1

效果：
Runtime: 2617 ms, faster than 5.01% of Python online submissions for Find the Town Judge.
Memory Usage: 18.6 MB, less than 62.17% of Python online submissions for Find the Town Judge.


"""
***********************解法二分割线***********************
"""
看一下别人的写法
class Solution(object):
    def findJudge(self, n, trust):
        """
        :type n: int
        :type trust: List[List[int]]
        :rtype: int
        """
        
        Trusted = [0] * (n+1)
        for (a, b) in trust:
            Trusted[a] -= 1
            Trusted[b] += 1
            
        for i in range(1, len(Trusted)):
            if Trusted[i] == n-1:
                return i
        return -1


效果：
Runtime: 791 ms, faster than 77.25% of Python online submissions for Find the Town Judge.
Memory Usage: 18.5 MB, less than 62.17% of Python online submissions for Find the Town Judge.




"""
--------------------------------------题目分割线----------------------------------------------
"""
841. Keys and Rooms <medium>
输入：
int[int[]]
输出：
bool

这里要注意一个问题，这是个有向图，我一开始用邻接矩阵做，然后发现一个问题，即使是所有房间的钥匙都能在其他房间找到（不存在想要进入这个房间必须进入这个房间）
但是也会出现，想进入A先进入B，想进入B先进入A的情况
如：
[[4],[3],[],[2,5,7],[1],[],[8,9],[],[],[6]]

class Solution(object):
    def canVisitAllRooms(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: bool
        """
        q = deque(rooms[0])   #deque -> doubly ended queue
        visited = defaultdict(int)
        visited[0]=1
        count = 1  #to keep a count of unique number of rooms visited
        while q:
            room = q.popleft()  #poping first element
            if room not in visited:
                visited[room] = 1
                count+=1
                q+=rooms[room]
        if count==len(rooms):
            return True
        return False

效果：
Runtime: 110 ms, faster than 20.17% of Python online submissions for Keys and Rooms.
Memory Usage: 14 MB, less than 57.10% of Python online submissions for Keys and Rooms.


