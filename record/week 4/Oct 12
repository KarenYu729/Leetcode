week 4
Oct 12


本来今天想摆烂的
但是下午投的JPMorgan没一会就给我发笔试了



"""
--------------------------------------题目分割线----------------------------------------------
"""
643. Maximum Average Subarray I <easy>
输入：
str
int
输出：
int

class Solution(object):
    def findMaxAverage(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: float
        """
        current=sum(nums[0:k])

        maxi = current
        for i in range(k,len(nums)) :
            current+=nums[i]-nums[i-k]
            maxi = max(current,maxi)
        return float(maxi)/k

效果：
Runtime: 998 ms, faster than 96.77% of Python online submissions for Maximum Average Subarray I.
Memory Usage: 23 MB, less than 18.66% of Python online submissions for Maximum Average Subarray I.

从头开始for循环会TLE




"""
--------------------------------------题目分割线----------------------------------------------
"""
187. Repeated DNA Sequences <medium>
输入：
str
输出：
str[str[]]

class Solution(object):
    def findRepeatedDnaSequences(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        res, d = [], {}
        for i in range(len(s)):
            # 如果这个字符串不在字典里（曾经没有出现过），就给一个赋值（赋值0或者1或者其他都可以）
            if s[i:i+10] not in d: 
                d[s[i:i+10]] = 0
            elif s[i:i+10] not in res: 
                res.append(s[i:i+10])
                
        return res

效果：
Runtime: 96 ms, faster than 64.13% of Python online submissions for Repeated DNA Sequences.
Memory Usage: 34.5 MB, less than 38.58% of Python online submissions for Repeated DNA Sequences.






"""
--------------------------------------题目分割线----------------------------------------------
"""
438. Find All Anagrams in a String <medium>
输入：
str
str

输出：
int[]

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        # take counter of first n elements in s_dict with n = len(p) - 1
        s_dict = collections.Counter(s[:len(p)-1]) 
        # counter of p, this should not be changed
        p_dict = collections.Counter(p)
        start = 0
        # final result list
        res = []
        # We iterate over the string s, and in each step we check if s_dict and p_dict match
        for i in range(len(p)-1, len(s)):
            # updating the counter & adding the character
            s_dict[s[i]] += 1
            # checking if counters match
            if s_dict == p_dict:
                res.append(start)
            # remove the first element from counter
            s_dict[s[start]] -= 1
            #if element count = 0, pop it from the counter
            if s_dict[s[start]] == 0:
                del s_dict[s[start]]
            start += 1
            
        return res


效果：
Runtime: 372 ms, faster than 19.12% of Python online submissions for Find All Anagrams in a String.
Memory Usage: 14.5 MB, less than 56.50% of Python online submissions for Find All Anagrams in a String.



"""
--------------------------------------题目分割线----------------------------------------------
"""
713. Subarray Product Less Than K <medium>
输入：
int[]
int
输出：
int

class Solution(object):
    def numSubarrayProductLessThanK(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        if k <= 1 : return 0 # edge cases
        prod = 1
        cnt = left= 0
        for right in range(len(nums)):
            prod *= nums[right] # expand window
            while prod >= k: # shrink window
                prod /= nums[left]
                left += 1
            if prod < k: 
                
                cnt += right - left + 1
        return cnt 
        '''
                if [5,2,6] is current window then 
                product is less than 100 => [5], [5,2], [5,2,6] was counted while 
                expanding right => right - left + 1 
                for each case => 1 for [5], 
                2 for [5,2] and [2], 
                3 for [5,2,6], [2,6] and [6] respectively
                ''' 
         
效果：
Runtime: 584 ms, faster than 93.26% of Python online submissions for Subarray Product Less Than K.
Memory Usage: 15.5 MB, less than 73.26% of Python online submissions for Subarray Product Less Than K.

这里的思路是：
cnt += right - left + 1
只要有一个subarray可以，那么这个subarray的subarray也可以->拆开


