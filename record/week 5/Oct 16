week 5
Oct 16

第一次感觉来例假之后头疼

"""
--------------------------------------题目分割线----------------------------------------------
"""
21. Merge Two Sorted Lists <easy>
输入：
ListNode
ListNode
输出：
ListNode

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        dummy = res = ListNode(0)
        while list1 and list2:
            if list1.val<list2.val:
                res.next=list1
                list1=list1.next
                res=res.next
            else:
                res.next=list2
                list2=list2.next
                res=res.next
        while list1:
            res.next=list1
            list1=list1.next
            res=res.next
        while list2:
            res.next=list2
            list2=list2.next
            res=res.next
        
        return dummy.next

效果：
Runtime: 52 ms, faster than 21.50% of Python online submissions for Merge Two Sorted Lists.
Memory Usage: 13.3 MB, less than 81.54% of Python online submissions for Merge Two Sorted Lists.



"""
--------------------------------------题目分割线----------------------------------------------
"""
203. Remove Linked List Elements <easy>
输入：
ListNode
int
输出：
ListNode

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        curr = dummy = ListNode(next = head)
        
        while curr.next:
            if curr.next.val == val:
                curr.next=curr.next.next
            else:
                curr=curr.next
        return dummy.next

不能用head，否则第一位没办法判断（当然理论上在最开始判断一下第一位就能用head了）

效果：
Runtime: 101 ms, faster than 54.99% of Python online submissions for Remove Linked List Elements.
Memory Usage: 20.2 MB, less than 80.16% of Python online submissions for Remove Linked List Elements.






"""
--------------------------------------题目分割线----------------------------------------------
"""
206. Reverse Linked List <easy>
输入：
ListNode
输出：
ListNode

"""
***********************解法一分割线***********************
"""
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head==None or head.next==None:
            return head
        
        reversed_head = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return reversed_head

效果：
Runtime: 23 ms, faster than 92.43% of Python online submissions for Reverse Linked List.
Memory Usage: 18.8 MB, less than 11.42% of Python online submissions for Reverse Linked List.


"""
***********************解法二分割线***********************
"""
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        prev = None        
        
        while head:
            curr = head
            head = head.next
            curr.next = prev
            prev = curr
        return prev

效果：
Runtime: 45 ms, faster than 38.78% of Python online submissions for Reverse Linked List.
Memory Usage: 15.4 MB, less than 76.30% of Python online submissions for Reverse Linked List.

reference：
https://leetcode.com/problems/reverse-linked-list/discuss/2687413/Python-Easy-Codes

摘下来一个，戳上去一个


"""
--------------------------------------题目分割线----------------------------------------------
"""
378. Kth Smallest Element in a Sorted Matrix <medium>
输入：
int
输出：
int

class Solution(object):
    def kthSmallest(self, matrix, k):
        """
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """
        nums = []
        for i in range(len(matrix)):
            nums+=matrix[i]
        nums.sort()
        return nums[k-1]

效果：
Runtime: 167 ms, faster than 92.00% of Python online submissions for Kth Smallest Element in a Sorted Matrix.
Memory Usage: 17.6 MB, less than 45.43% of Python online submissions for Kth Smallest Element in a Sorted Matrix.



