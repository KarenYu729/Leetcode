week 5
Oct 19


解释一下为什么17， 18 两天没有
17号在做笔试题，写report，18号在写report和头疼（物理意义上的）


"""
--------------------------------------题目分割线----------------------------------------------
"""
739. Daily Temperatures <medium>
输入：
int[]
输出：
int[]

class Solution(object):
    def dailyTemperatures(self, temperatures):
        """
        :type temperatures: List[int]
        :rtype: List[int]
        """
        ans = [0 for i in range(len(temperatures))]
        stack = []
        # Maintain a decreasing monotonic stack
        for i in range(len(temperatures)):
            # as the values are decreasing keep adding to stack
            if len(stack)==0 or temperatures[i]<=temperatures[stack[-1]]:
                stack.append(i)
            else:
                #when an increasing value comes, we need to pop the stack
                #until the stack again becomes decreasingly monotonic
                while stack and temperatures[i] > temperatures[stack[-1]]:
                    idx = stack.pop()
                    ans[idx] = i-idx
                #finally append the index as the stack will now be monotonic
                stack.append(i)
        # note the last index will always be 0
        return ans

效果：
Runtime: 1213 ms, faster than 76.56% of Python online submissions for Daily Temperatures.
Memory Usage: 26.9 MB, less than 5.00% of Python online submissions for Daily Temperatures.

不知道为什么其他都会TLE
单独测的时候都OK，submit的时候就会TLE，可能是网的问题



"""
--------------------------------------题目分割线----------------------------------------------
"""
735. Asteroid Collision <medium>
输入：
int[]
输出：
int[]

class Solution(object):
    def asteroidCollision(self, asteroids):
        """
        :type asteroids: List[int]
        :rtype: List[int]
        """
        stack = []
        
        for i in range(len(asteroids)):
            while stack and stack[-1] > 0 and asteroids[i]<0:
                if abs(stack[-1]) < abs(asteroids[i]):
                    stack.pop()
                    continue
                elif abs(stack[-1]) == abs(asteroids[i]):
                    stack.pop()
                
                break
                    
            else:
                stack.append(asteroids[i])
        
        return stack

效果：
Runtime: 213 ms, faster than 15.59% of Python online submissions for Asteroid Collision.
Memory Usage: 14.5 MB, less than 67.64% of Python online submissions for Asteroid Collision.



"""
--------------------------------------题目分割线----------------------------------------------
"""
496. Next Greater Element I <easy>
输入：
int[]
int[]
输出：
int[]

class Solution(object):
    def nextGreaterElement(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        idx_dict = {n: i for i, n in enumerate(nums2)}
        lookup = [-1 for _ in range(len(nums2))]
        res = []
        stack = []
        print(idx_dict)
        
        for i in range(len(nums2)-1,-1,-1):
            while stack and stack[-1]<nums2[i]:
                stack.pop()
            if len(stack) == 0:
                stack.append(nums2[i])
                lookup[i] = -1
            else:
                lookup[i] = stack[-1]
                stack.append(nums2[i])
                
        for i in nums1:
            res.append(lookup[idx_dict[i]])
        
        return res

效果：
Runtime: 63 ms, faster than 71.19% of Python online submissions for Next Greater Element I.
Memory Usage: 14 MB, less than 11.11% of Python online submissions for Next Greater Element I.




"""
--------------------------------------题目分割线----------------------------------------------
"""
503. Next Greater Element II <medium>
输入：
int[]
输出：
int[]

class Solution(object):
    def nextGreaterElements(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        lookup = nums+nums
        res = [0 for _ in range(len(lookup))]
        stack = []
        
        
        for i in range(len(res)-1,-1,-1):
            
            while stack and stack[-1]<=lookup[i]:
                stack.pop()
            if len(stack) == 0:
                stack.append(lookup[i])
                res[i] = -1
            else:
                res[i] = stack[-1]
                stack.append(lookup[i])
        
        return res[0:len(nums)]

效果：
Runtime: 532 ms, faster than 18.66% of Python online submissions for Next Greater Element II.
Memory Usage: 15.2 MB, less than 83.09% of Python online submissions for Next Greater Element II.



"""
--------------------------------------题目分割线----------------------------------------------
"""
394. Decode String <medium>
输入：
str
输出：
str

class Solution(object):
    def decodeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        curr_s = ""
        curr_n = 0
        stack = []
        for char in s:
            if char.isdigit():
                curr_n = curr_n * 10 + int(char)
            elif char == "[":
                stack.append((curr_s, curr_n))
                curr_s = ""
                curr_n = 0
            elif char == "]":
                prev_s, prev_n = stack.pop()
                curr_s = prev_s + prev_n * curr_s
            else:
                curr_s += char
        return curr_s

效果：
Runtime: 33 ms, faster than 33.20% of Python online submissions for Decode String.
Memory Usage: 13.4 MB, less than 77.87% of Python online submissions for Decode String.



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：








效果：


