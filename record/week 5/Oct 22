week 5
Oct 22


"""
--------------------------------------题目分割线----------------------------------------------
"""
61. Rotate List <medium>
输入：
ListNode
int
输出：
ListNode

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head:
            return None
        
        lastElement = head
        length = 1
        # get the length of the list and the last node in the list
        while ( lastElement.next ):
            lastElement = lastElement.next
            length += 1

        # If k is equal to the length of the list then k == 0
        # ElIf k is greater than the length of the list then k = k % length
        k = k % length
            
        # Set the last node to point to head node
        # The list is now a circular linked list with last node pointing to first node
        lastElement.next = head
        
        # Traverse the list to get to the node just before the ( length - k )th node.
        # Example: In 1->2->3->4->5, and k = 2
        #          we need to get to the Node(3)
        tempNode = head
        for _ in range( length - k - 1 ):
            tempNode = tempNode.next
        
        # Get the next node from the tempNode and then set the tempNode.next as None
        # Example: In 1->2->3->4->5, and k = 2
        #          tempNode = Node(3)
        #          answer = Node(3).next => Node(4)
        #          Node(3).next = None ( cut the linked list from here )
        answer = tempNode.next
        tempNode.next = None
        
        return answer
        

效果：
Runtime: 36 ms, faster than 70.36% of Python online submissions for Rotate List.
Memory Usage: 13.5 MB, less than 29.92% of Python online submissions for Rotate List.

reference：
https://leetcode.com/problems/rotate-list/discuss/348197/96-faster-Simple-python-solution-with-explanation


"""
--------------------------------------题目分割线----------------------------------------------
"""
441. Arranging Coins <easy>
输入：
int
输出：
int

"""
***********************解法一分割线***********************
"""
暴力
class Solution(object):
    def arrangeCoins(self, n):
        """
        :type n: int
        :rtype: int
        """
        completeStairs = 0
        
        # i = row number
        i = 1
        while n >= 0:
            # For ith row, we use i coins to fill it completely
            # So reduce i coins from n
            n -= i
            # If n is not negative
            # that means this row can be fully filled so increment count of completeStairs
            if n >= 0: completeStairs += 1
            # Move to the next row
            i += 1

        return completeStairs

效果：
Runtime: 824 ms, faster than 34.29% of Python online submissions for Arranging Coins.
Memory Usage: 13.4 MB, less than 61.19% of Python online submissions for Arranging Coins.

"""
***********************解法二分割线***********************
"""
binary search
completeStairs = 0
		
		start = 1
        end = n

        while start <= end:
            mid = start + (end - start) // 2
			# How many coins required to completely fill 'mid' rows?
			# Use Gauss Summation to find that in O(1) time
            if (mid * ( mid + 1)) // 2 <= n:
                completeStairs = mid
                start = mid + 1
            else:
                end = mid - 1


        return completeStairs
        
效果：
Runtime: 50 ms, faster than 57.29% of Python online submissions for Arranging Coins.
Memory Usage: 13.5 MB, less than 11.50% of Python online submissions for Arranging Coins.

reference:
https://leetcode.com/problems/arranging-coins/discuss/2654856/Python-O(N)-O(LogN)-O(1)-or-EXPLAINED



"""
--------------------------------------题目分割线----------------------------------------------
"""
560. Subarray Sum Equals K <medium>
输入：
int[]
int
输出：
int

class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        ans=0
        prefsum=0
        d={0:1}
        
        for num in nums:
			prefsum = prefsum + num

			if prefsum-k in d:
				ans = ans + d[prefsum-k]

			if prefsum not in d:
				d[prefsum] = 1
			else:
				d[prefsum] = d[prefsum]+1

        return ans
        

效果：
Runtime: 481 ms, faster than 60.34% of Python online submissions for Subarray Sum Equals K.
Memory Usage: 15.9 MB, less than 70.62% of Python online submissions for Subarray Sum Equals K.

reference：
https://leetcode.com/problems/subarray-sum-equals-k/discuss/2301103/Python-HashMap-O(n)-(Explanation)


"""
--------------------------------------题目分割线----------------------------------------------
"""
49. Group Anagrams
输入：
str[]
输出：
str[str[]]

class Solution(object):
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        strDict = {}
        
        for i in range(len(strs)):
            strKey  = ''.join(sorted(strs[i]))
            if strKey not in strDict:
                strDict[strKey] = [strs[i]]
            else:
                strDict[strKey].append(strs[i])
        
        return list(strDict.values())
        
效果：
Runtime: 157 ms, faster than 63.43% of Python online submissions for Group Anagrams.
Memory Usage: 17.8 MB, less than 55.45% of Python online submissions for Group Anagrams.

reference:
https://leetcode.com/problems/group-anagrams/discuss/2384037/Python-oror-Easily-Understood-oror-Hash-Table-oror-Fast-oror-Simple


"""
--------------------------------------题目分割线----------------------------------------------
"""
138. Copy List with Random Pointer <medium>
输入：

输出：


"""
***********************解法一分割线***********************
"""
"""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        return copy.deepcopy(head)        

效果：
Runtime: 84 ms, faster than 35.19% of Python online submissions for Copy List with Random Pointer.
Memory Usage: 15.4 MB, less than 5.64% of Python online submissions for Copy List with Random Pointer.

"""
***********************解法二分割线***********************
"""



效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




