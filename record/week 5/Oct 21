week 5
Oct 21





"""
--------------------------------------题目分割线----------------------------------------------
"""
155. Min Stack <medium>
输入：

输出：


class MinStack(object):

    def __init__(self):
        self.stack = []

    def push(self, val):
        """
        :type val: int
        :rtype: None
        """
        minn = min(val, self.stack[-1][1]) if self.stack else val
        self.stack.append((val, minn))
        

    def pop(self):
        """
        :rtype: None
        """
        self.stack.pop()
        

    def top(self):
        """
        :rtype: int
        """
        return self.stack and self.stack[-1][0]

    def getMin(self):
        """
        :rtype: int
        """
        return self.stack and self.stack[-1][1]
        

效果：
Runtime: 135 ms, faster than 18.99% of Python online submissions for Min Stack.
Memory Usage: 17.8 MB, less than 7.73% of Python online submissions for Min Stack.



"""
--------------------------------------题目分割线----------------------------------------------
"""
71. Simplify Path <medium>
输入：
str
输出：
str

class Solution(object):
    def simplifyPath(self, path):
        """
        :type path: str
        :rtype: str
        """
        directories, stack = path.split("/"), []
        
        for directory in directories:
            if directory == "" or directory == ".": 
                continue
            elif directory == ".." and stack: 
                stack.pop()
            elif directory == "..": 
                continue
            else: 
                stack.append(directory)
        
        return "/" + "/".join(stack)


效果：
Runtime: 55 ms, faster than 12.32% of Python online submissions for Simplify Path.
Memory Usage: 13.7 MB, less than 9.72% of Python online submissions for Simplify Path.



"""
--------------------------------------题目分割线----------------------------------------------
"""
23. Merge k Sorted Lists <hard>
输入：
ListNode[]
输出：
ListNode

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        head = ListNode(None)
        curr = head
        h = []
        for i in range(len(lists)):
            if lists[i]:
                print(lists[i].val)
                heapq.heappush(h, (lists[i].val, i))
                lists[i] = lists[i].next
        
        while h:
            val, i = heapq.heappop(h)
            curr.next = ListNode(val)
            curr = curr.next
            if lists[i]:
                heapq.heappush(h, (lists[i].val, i))
                lists[i] = lists[i].next
        
        return head.next


效果：
Runtime: 238 ms, faster than 27.91% of Python online submissions for Merge k Sorted Lists.
Memory Usage: 19.8 MB, less than 49.33% of Python online submissions for Merge k Sorted Lists.




"""
--------------------------------------题目分割线----------------------------------------------
"""
347. Top K Frequent Elements <medium>
输入：
int[]
int
输出：
int[]

class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        numsCnt = Counter(nums)
        heap = []
        
        for i in numsCnt:
            heapq.heappush(heap, (numsCnt[i], i))
            if len(heap)>k:
                heapq.heappop(heap)
        res = []        
        for i in range(len(heap)):
            res.append(heap[i][1])
        
        return res


效果：
Runtime: 184 ms, faster than 45.96% of Python online submissions for Top K Frequent Elements.
Memory Usage: 16.6 MB, less than 93.70% of Python online submissions for Top K Frequent Elements.



"""
--------------------------------------题目分割线----------------------------------------------
"""
83. Remove Duplicates from Sorted List <easy>
输入：
ListNode
输出：
ListNode

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        dummy = ListNode(0)
        dummy.next = head
        
        while head and head.next:
            while head and head.next and head.val == head.next.val:
                head.next = head.next.next
            head = head.next
        
        return dummy.next


效果：
Runtime: 22 ms, faster than 98.34% of Python online submissions for Remove Duplicates from Sorted List.
Memory Usage: 13.7 MB, less than 13.17% of Python online submissions for Remove Duplicates from Sorted List.



"""
--------------------------------------题目分割线----------------------------------------------
"""
82. Remove Duplicates from Sorted List II <medium>
输入：
ListNode
输出：
ListNode

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        pre = dummy = ListNode(0)
        dummy.next = head
        
        
        while head and head.next:
            if head.val == head.next.val:
                while head and head.next and head.val == head.next.val:
                    head = head.next
                head = head.next
                pre.next = head
            else:
                
                pre = pre.next
                head = head.next
        
        return dummy.next
       

效果：
Runtime: 64 ms, faster than 15.43% of Python online submissions for Remove Duplicates from Sorted List II.
Memory Usage: 13.4 MB, less than 64.01% of Python online submissions for Remove Duplicates from Sorted List II.





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：





效果：








