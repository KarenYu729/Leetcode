week 0
Sep 16

"""
--------------------------------------题目分割线----------------------------------------------
"""
1. Two Sum <easy>
Leetcode 入门题，大多用来对暗号×
输入：
nums: int[]
target: int
输出：
数组中两个序号[i,j]，nums[i]+nums[j]=target
"""
***********************解法一分割线***********************
"""
最straightforward的方法就是咱们最喜欢的暴力解法
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        res = []
        for i in range(len(nums)):
            res.append(i)
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j] == target:
                    res.append(j)
                    return res
            res.pop()
        
        return []
 
 效果：
 Success
Details 
Runtime: 2277 ms, faster than 40.41% of Python online submissions for Two Sum.
Memory Usage: 14.3 MB, less than 67.67% of Python online submissions for Two Sum.
        
"""
***********************解法二分割线***********************
"""
最经典的解法就是使用字典，此处打开新世界的大门
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        TargetSubDict = {}
        for i in range(len(nums)):
            if nums[i] in TargetSubDict:
                return [TargetSubDict[nums[i]], i]
            if target-nums[i] not in TargetSubDict:
                TargetSubDict[target-nums[i]] = i   
        
        return []

效果：
Success
Details 
Runtime: 51 ms, faster than 89.99% of Python online submissions for Two Sum.
Memory Usage: 14.3 MB, less than 67.67% of Python online submissions for Two Sum.

"""
--------------------------------------题目分割线----------------------------------------------
"""
4. Median of Two Sorted Arrays <hard>
输入：
int[]
int[]
输出：
float
两个数组组合之后的中位数
"""
***********************解法一分割线***********************
"""
最straightforward的方法同样是咱们最喜欢的暴力解法
合并数组，排序，中间位置或中间两个数的average
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        uni_nums = nums1+nums2
        uni_nums.sort()
        if len(uni_nums)%2 == 1:
            return uni_nums[len(uni_nums)//2]
        else:
            return (uni_nums[len(uni_nums)//2]+uni_nums[(len(uni_nums)//2)-1])/2
            
这里有个问题，如果不是用的python3，而是python，在计算除法的时候会出问题，压根没有整除和除法的区别

效果：
Runtime: 287 ms, faster than 5.08% of Python3 online submissions for Median of Two Sorted Arrays.
Memory Usage: 14.1 MB, less than 67.02% of Python3 online submissions for Median of Two Sorted Arrays.

如果用的是python要注意用float转类型
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        uni_nums = nums1+nums2
        uni_nums.sort()
        div = divmod(len(uni_nums),2)
        idx = div[0]+div[1]
        if len(uni_nums)%2 == 1:
            return float(uni_nums[idx-1])
        else:
            return float(uni_nums[idx]+uni_nums[idx-1])/2

效果：
Runtime: 146 ms, faster than 36.20% of Python online submissions for Median of Two Sorted Arrays.
Memory Usage: 13.7 MB, less than 49.98% of Python online submissions for Median of Two Sorted Arrays.

直接：
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        uni_nums = nums1+nums2
        uni_nums.sort()
        if len(uni_nums)%2 == 1:
            return float(uni_nums[len(uni_nums)//2])
        else:
            return float(uni_nums[len(uni_nums)//2]+uni_nums[(len(uni_nums)//2)-1])/2
亦可
效果：
Runtime: 150 ms, faster than 33.60% of Python online submissions for Median of Two Sorted Arrays.
Memory Usage: 13.7 MB, less than 49.98% of Python online submissions for Median of Two Sorted Arrays.


