week 2
Sep 28

先提前敲定一下明天做的题
明天还做DP
不到黄河心不死了属于是

jump game & unique path


"""
--------------------------------------题目分割线----------------------------------------------
"""
55. Jump Game <medium>
输入：
int[]
输出：
bool

"""
***********************解法一分割线***********************
"""
虽然是DP的题，但是topic里有greedy
所以先按照greedy来看
class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums)==1:
            return True
        JumpIdx = len(nums)-1
        
        for i in range(len(nums)-2, -1, -1):
            # 不是按从头跳到尾，而是检查能不能从最后走到开头
            # 如果只有一位，那开头就是结尾，当然可以
            # 贪心策略就是，如果每一次都选择跳最大的步长，该步长能够到达前一步的位置（因为是一步一步倒退的，所以理论上没有0就行）
            # 最后检查有没有到开头
            if i+nums[i]>=JumpIdx:
                JumpIdx = i
        
        return JumpIdx==0

效果：
Runtime: 1023 ms, faster than 21.09% of Python online submissions for Jump Game.
Memory Usage: 14.5 MB, less than 66.33% of Python online submissions for Jump Game.

之前想了一下，可不可以认为出现0就False，显然不可以，因为0是有可能被跳过的，那么可以向前找，如果有能跳过0的就可以
但是这种贪心策略非常麻烦，而且慢，需要考虑很多情况，让我WA了很多次
听取wa声一片.jpg
class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums)==1:
            return True
        if nums[0] == 0:
            return False
        
        for i in range(1, len(nums)):
            if nums[i]==0 and i != len(nums)-1:
                for j in range(i):
                    if nums[j]+j>i:
                        break
                    if j==i-1 and nums[j]+j<=i:
                        return False
        
        return True

效果：
Runtime: 1118 ms, faster than 15.95% of Python online submissions for Jump Game.
Memory Usage: 14.9 MB, less than 6.58% of Python online submissions for Jump Game.

奉献一组test case
[2,3,1,1,4]
[3,2,1,0,4]
[2,0]
[2,0,0]
[1,1,1,0]
[2,0,1,0,1]
[2,0,0,0,2,0,0,0]


"""
***********************解法二分割线***********************
"""
DP
逻辑，每一步都找能跳出的最远距离
以题目example为例：

nums: [2,3,1,1,4]
初始化：
DP:   [0,0,0,0,0]
DP:   [2,0,0,0,0]
更新DP下一格
DP：  [2,3,0,0,0] 3=max(dp[0]-1, nums[1])
DP：  [2,3,2,0,0] 2=max(dp[1]-1, nums[2])
相当于一辆汽车，每一步都做一个判断，在自己剩的汽油和下一格能给自己填的汽油里选多的那个，然后舍弃另一个，
减一的原因是因为走一格，消耗了一格汽油

class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        n = len(nums)
        dp = [0] * n
        dp[0] = nums[0]
	
        for i in range(n-1):
            if dp[i] == 0:
                return False 
            dp[i+1] = max(dp[i]-1, nums[i+1])

        return True 

效果：
Runtime: 912 ms, faster than 29.25% of Python online submissions for Jump Game.
Memory Usage: 14.7 MB, less than 12.18% of Python online submissions for Jump Game.

reference：
https://leetcode.com/problems/jump-game/discuss/2635027/Python-Solution-DP-%2B-Greedy-Approach



"""
--------------------------------------题目分割线----------------------------------------------
"""
45. Jump Game II <medium>
输入：
int[]
输出：
int

判断最短路径，显然也是greedy和DP都行
（一个题外话，感觉如果用这个构造一个图，每个位置根据数字的大小，将在范围内的所有点都和这个点连上，然后求最短路径，似乎也不是不可以）
（再题外话，我每次都想管Dijkstra叫迪士尼……）
"""
***********************解法一分割线***********************
"""
倔强的自己写的，这里有一个易错的点
就是取最小值
一开始采取的策略是在其能到达的最远距离和刀valid_idx里取最小值（最远距离指在数组长度和idx+跳跃距离中取较小值->不能跳出去）
但是并非如此，因为很有可能最小的跳跃点并不是在最远距离，而是在跳跃的中间距离，所以应该在跳跃区间里找最小值
这一点有类似的解法：
https://leetcode.com/problems/jump-game-ii/discuss/2283720/Python-3-(brute-force-DP-greedy)

另一点就是在截取数组的时候，要关注一下最右边是len(nums)，而不是len(nums)-1，因为要允许走到最后！这里卡了好久
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)==1:
            return 0
        step=[float('inf')]*len(nums)
        step[-1]=0
        step[-2]=1
        valid_idx=len(nums)-1
        
        for i in range(len(nums)-2,-1,-1):
            if i+nums[i]>=valid_idx:
                step[i]=min(1+step[valid_idx], 1+min(step[i+1: min(i+nums[i]+1, len(nums))]))
                valid_idx=i
            else:
                step[i]=float('inf')
        print(step)
        return step[0]

效果
Runtime: 1377 ms, faster than 29.63% of Python online submissions for Jump Game II.
Memory Usage: 14.4 MB, less than 53.59% of Python online submissions for Jump Game II.

不过还是要说，我这写的……挺不像人的

class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        if n == 1:
            return 0
        
        # dp[i] means the minimum number of jumps to reach index i
        # for each dp[i]，we need to find the earliest j that can reach i from j
        # dp[i] = dp[j] + 1
        
        dp = [0] * n
        j = 0
        for i in range(1, n):
            while j + nums[j] < i:
                j += 1
            dp[i] = dp[j] + 1
        
        return dp[-1]

类似的，只是方向是反的而已

效果：
Runtime: 204 ms, faster than 54.29% of Python online submissions for Jump Game II.
Memory Usage: 14.3 MB, less than 53.59% of Python online submissions for Jump Game II.

reference：
https://leetcode.com/problems/jump-game-ii/discuss/2027340/Python-or-Dynamic-Programming-or-Easy-to-Understand



"""
--------------------------------------题目分割线----------------------------------------------
"""
62. Unique Paths <medium>
输入：
int
int
输出：
int

class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        grid=[[1]*n]*m
        # i row
        for i in range(1, m):
            # j col
            for j in range(1, n):
                grid[i][j] = grid[i-1][j]+grid[i][j-1]
        
        return grid[m-1][n-1]

效果：
Runtime: 39 ms, faster than 18.22% of Python online submissions for Unique Paths.
Memory Usage: 13.4 MB, less than 69.68% of Python online submissions for Unique Paths.

如果只有一行或者一列，那么走到每个格子都只有一种路径选择
如果有多行多列，就相当于走到这个格子的左边/上面，然后多走一步，也就是策略是走到左边的路径数目加上走到上面的路径数目
  0 1 2 3 4 5 6
0 1 1 1 1 1 1 1
1 1 2 3 4 5 6 7
2 1 3 6 ……
3 1 ……
4 1 ……
5 1 ……
6 1 ……



"""
--------------------------------------题目分割线----------------------------------------------
"""
63. Unique Paths II <medium>
输入：
int[int[]]
输出：
int

这里必须要多加一个padding，因为不一定只有一个石子挡路

class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m=len(obstacleGrid)
        n=len(obstacleGrid[0])
        grid=[[0] * (n+1) for _ in range(m+1)]        
        grid[0][1]=1
        print(grid)
        
        # i row
        for i in range(1, m+1):
            # j col
            for j in range(1, n+1):
                if not obstacleGrid[i-1][j-1]:
                    grid[i][j] = grid[i-1][j]+grid[i][j-1]
        
        return grid[-1][-1] 

效果：
Runtime: 70 ms, faster than 10.17% of Python online submissions for Unique Paths II.
Memory Usage: 13.3 MB, less than 95.51% of Python online submissions for Unique Paths II.





"""
--------------------------------------题目分割线----------------------------------------------
"""
64. Minimum Path Sum <medium>
输入：
int[int[]]
输出：
int

class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        row, col = len(grid)+1, len(grid[0])+1
        dp = [[0] * (col) for _ in range(row)] 
        for i in range(1, row):
            for j in range(1, col):
                dp[i][j] = grid[i-1][j-1]
        
        for i in range(1, row):
            for j in range(1, col):
                if i==1:
                    dp[i][j] += dp[i][j-1]
                elif j==1:
                    dp[i][j] += dp[i-1][j]
                else:
                    dp[i][j] += min(dp[i-1][j], dp[i][j-1])
        
        return dp[-1][-1]

效果：
Runtime: 234 ms, faster than 5.61% of Python online submissions for Minimum Path Sum.
Memory Usage: 15.1 MB, less than 30.19% of Python online submissions for Minimum Path Sum.







