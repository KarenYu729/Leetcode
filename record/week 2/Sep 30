week 2
Sep 30


做了两天project
这不整点DP回回血！


"""
--------------------------------------题目分割线----------------------------------------------
"""
42. Trapping Rain Water <hard>
输入：
int[]
输出：
int


"""
***********************解法一分割线***********************
"""
这道题被分在DP里，但是被大哥骂了一顿，说不要那么不变通，这道题用单调栈做更好
看了DP的解法，很显然确实不太符合人类的思路
class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        if not height:
            return 0
        result, length = 0, len(height)
        left_max, right_max = [height[0]], [height[-1]]
        for i in range(1, length):
            left_max.append(max(left_max[i - 1], height[i]))
            right_max.append(max(right_max[i - 1], height[length - i - 1]))
        right_max.reverse()
        return sum(min(left_max[i], right_max[i]) - height[i] for i in range(1, length))

效果：
Runtime: 308 ms, faster than 5.67% of Python online submissions for Trapping Rain Water.
Memory Usage: 15.4 MB, less than 11.54% of Python online submissions for Trapping Rain Water.

reference：
https://leetcode.com/problems/trapping-rain-water/discuss/1263030/Python3-Solution-with-DP-(Dynamic-Programming)
看了一下别的题解，现在理解这种做法了
https://leetcode.com/problems/trapping-rain-water/discuss/1703627/Python-solution-with-explanationor-Monotonic-Stack-O(N)
也就是说，其实保存的就是单增的，也就是每个位置能碰触到的最合适的壁

"""
***********************解法二分割线***********************
"""
单调栈，顾名思义就是栈内元素单调按照递增(递减)顺序排列的栈。
单调递增栈：

①在一个队列中针对每一个元素从它右边寻找第一个比它小的元素

②在一个队列中针对每一个元素从它左边寻找第一个比它小的元素

单调递减栈：

①在一个队列中针对每一个元素从它右边寻找第一个比它大的元素

②在一个队列中针对每一个元素从它左边寻找第一个比它大的元素

单调栈何时用：为任意一个元素找左边和右边第一个比自己大/小的位置用单调栈.

由于每个元素最多各自进出栈一次,复杂度是O(n).

单调递增栈用于找到当前元素左边第一个小于它的的元素
————————————————
版权声明：本文为CSDN博主「今夜456」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_59144780/article/details/122787827

现在有一组数10，3，7，4，12。从左到右依次入栈，则如果栈为空或入栈元素值小于栈顶元素值，则入栈；否则，如果入栈则会破坏栈的单调性，则需要把比入栈元素小的元素全部出栈。单调递减的栈反之。

10入栈时，栈为空，直接入栈，栈内元素为10。

3入栈时，栈顶元素10比3大，则入栈，栈内元素为10，3。

7入栈时，栈顶元素3比7小，则栈顶元素出栈，此时栈顶元素为10，比7大，则7入栈，栈内元素为10，7。

4入栈时，栈顶元素7比4大，则入栈，栈内元素为10，7，4。

12入栈时，栈顶元素4比12小，4出栈，此时栈顶元素为7，仍比12小，栈顶元素7继续出栈，此时栈顶元素为10，仍比12小，10出栈，此时栈为空，12入栈，栈内元素为12。
————————————————
版权声明：本文为CSDN博主「csuzhucong」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/nameofcsdn/article/details/113360679

class Solution(object):
    def trap(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        stack = []
        res = 0
        for idx in range(len(height)):
            low = height[idx]
            while stack and height[stack[-1]]<=height[idx]:
                left = stack.pop()
                if low<height[left]:
                    res+= (idx - left-1)*(height[left]-low)
                low = height[left]
            if stack:
                res+= (idx - stack[-1]-1)*(height[idx]-low)
            stack.append(idx)
        return res

效果：
Runtime: 110 ms, faster than 82.80% of Python online submissions for Trapping Rain Water.
Memory Usage: 15.2 MB, less than 30.13% of Python online submissions for Trapping Rain Water.

reference：
https://leetcode.com/problems/trapping-rain-water/discuss/2280487/Python-monotonic-stack



"""
--------------------------------------题目分割线----------------------------------------------
"""
120. Triangle <medium>
输入：
int[int[]]
输出：
int

就是单纯把每条路都算出来
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        for i in range(1, len(triangle)):  # for each row in triangle (skipping the first),
            for j in range(i+1):           # loop through each element in the row
                triangle[i][j] += min(triangle[i-1][j-(j==i)],  # minimum sum from coordinate (x-1, y)
                                      triangle[i-1][j-(j>0)])   # minimum sum from coordinate (x-1, y-1)
        return min(triangle[-1])  # obtain minimum sum from last row

效果：
Runtime: 102 ms, faster than 30.02% of Python online submissions for Triangle.
Memory Usage: 14.6 MB, less than 28.23% of Python online submissions for Triangle.

reference：
https://leetcode.com/problems/triangle/discuss/2144882/Python-In-place-DP-with-Explanation



"""
--------------------------------------题目分割线----------------------------------------------
"""
198. House Robber <medium>
输入：
int[]
输出：
int

睡前做点轻松愉快的

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)<=2:
            return max(nums)
        dp = [0]*len(nums)
        dp[0] = nums[0]
        dp[1] = nums[1]
        
        for i in range(2, len(nums)):
            dp[i] = nums[i] + max(dp[0:i-1])
        
        return max(dp)
 
效果：
Runtime: 43 ms, faster than 9.79% of Python online submissions for House Robber.
Memory Usage: 13.2 MB, less than 88.62% of Python online submissions for House Robber.





"""
--------------------------------------题目分割线----------------------------------------------
"""
213. House Robber II <medium>
输入：
int[]
输出：
int

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp1 = [0, 0]
        dp2 = [-nums[0] if len(nums) > 1 else 0, 0]
        for i, n in enumerate(nums):
            dp1.append(max(dp1[i+1], n + dp1[i]))
            dp2.append(max(dp2[i+1], n + dp2[i]))
        return max(dp1[-2], dp2[-1])

效果：
Runtime: 27 ms, faster than 63.73% of Python online submissions for House Robber II.
Memory Usage: 13.4 MB, less than 40.70% of Python online submissions for House Robber II.


两遍前一题

reference：
https://leetcode.com/problems/house-robber-ii/discuss/693341/Python-6-line-less-obscure-DP-solution





