week 2
Oct 1

国庆！
国庆快乐!



"""
--------------------------------------题目分割线----------------------------------------------
"""
118. Pascal's Triangle <easy>
输入：
int
输出：
int[int[]]

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        if numRows == 1:
            return [[1]]
        
        res = [[1]]
        
        for i in range(1, numRows):
            List = [res[i-1][0]]
            for j in range(1, i):
                List.append(res[i-1][j-(j==i)]+res[i-1][j-(j>0)])
            List.append(1)
            res.append(List[:])
        return res

效果：
Runtime: 31 ms, faster than 41.81% of Python online submissions for Pascal's Triangle.
Memory Usage: 13.4 MB, less than 62.66% of Python online submissions for Pascal's Triangle.




"""
--------------------------------------题目分割线----------------------------------------------
"""
119. Pascal's Triangle II <easy>
输入：
int
输出：
int[]

class Solution(object):
    def getRow(self, rowIndex):
        """
        :type rowIndex: int
        :rtype: List[int]
        """
        if rowIndex == 0:
            return [1]
        
        res = [[1]]
        
        for i in range(1, rowIndex+1):
            List = [res[i-1][0]]
            for j in range(1, i):
                List.append(res[i-1][j-(j==i)]+res[i-1][j-(j>0)])
            List.append(1)
            res.append(List[:])
        return res[-1]


效果：
Runtime: 37 ms, faster than 22.41% of Python online submissions for Pascal's Triangle II.
Memory Usage: 13.4 MB, less than 33.93% of Python online submissions for Pascal's Triangle II.

注意一下这里的行数和之前的有区别，一个是总数，一个是行数index




"""
--------------------------------------题目分割线----------------------------------------------
"""
322. Coin Change <medium>
输入：
int[]
int
输出：
int

class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        dp=[float('inf')] * (amount+1)
        dp[0]=0            
        
        for coin in coins:
            for i in range(coin, amount+1):
                if i-coin>=0:
                    dp[i]=min(dp[i], dp[i-coin]+1)
        
        return -1 if dp[-1]==float('inf') else dp[-1]

效果：
Runtime: 1429 ms, faster than 69.05% of Python online submissions for Coin Change.
Memory Usage: 13.8 MB, less than 91.39% of Python online submissions for Coin Change.

reference:
https://leetcode.com/problems/coin-change/discuss/2058537/Python-Easy-2-DP-approaches

逻辑，对每一种coin都更新一遍，比如硬币是一块，那就先更新一遍所有的位置，都假设只用一块钱，再用两块，从两块的位置开始，往后跳




"""
--------------------------------------题目分割线----------------------------------------------
"""
338. Counting Bits <easy>
输入：
int
输出：
int[]

class Solution(object):
    def countBits(self, n):
        """
        :type n: int
        :rtype: List[int]
        """
        res = [0] * (n + 1)
        for i in range(1, n + 1):
            # * For even number -> # of 1s in i will be # of 1s in (i/2) or (i>>2).
            # * For odd number -> # of 1s in i will be # of 1s in (i/2) or (i>>2) + 1.
            res[i] = res[i >> 1] + (i % 2)

        return res

效果：
Runtime: 173 ms, faster than 30.12% of Python online submissions for Counting Bits.
Memory Usage: 17.4 MB, less than 57.20% of Python online submissions for Counting Bits.

reference：
https://leetcode.com/problems/counting-bits/discuss/2641040/Python-Bit-Manipulation-Solution-or-O(n)-Time-or-O(1)-Space


"""
--------------------------------------题目分割线----------------------------------------------
"""
542. 01 Matrix <medium>
输入：
int[int[]]
输出：
int[int[]]

"""
***********************解法一分割线***********************
"""
这道题分在DP里，但是实际上应该用BFS做最合适（LeetCode你觉得你这个分类合适嘛！）

class Solution(object):
    def updateMatrix(self, mat):
        """
        :type mat: List[List[int]]
        :rtype: List[List[int]]
        """
        row = len(mat)
        col = len(mat[0])
        dp = mat
        
        for i in range(row):
            for j in range(col):
                if dp[i][j]!=0:
                    top=dp[i-1][j] if i>0 else float('inf')
                    left=dp[i][j-1] if j>0 else float('inf')
                    dp[i][j]=min(top,left)+1
        for i in range(row-1,-1,-1):
            for j in range(col-1,-1,-1):
                if dp[i][j]!=0:
                    down=dp[i+1][j] if i<row-1 else float('inf')
                    right=dp[i][j+1] if j<col-1 else float('inf')
                    dp[i][j]=min(dp[i][j],min(down,right)+1)
        return dp

效果：
Runtime: 1009 ms, faster than 43.82% of Python online submissions for 01 Matrix.
Memory Usage: 15.9 MB, less than 89.77% of Python online submissions for 01 Matrix.


"""
***********************解法二分割线***********************
"""
BFS
讲道理很久没有BFS了，上次BFS还是4年前
class Solution(object):
    def updateMatrix(self, mat):
        """
        :type mat: List[List[int]]
        :rtype: List[List[int]]
        """
        # define row
        row = len(mat)
        
        # define col
        col = len(mat[0])
        
        # define the queue
        queue = deque()
        
        # firstly putting the 0 positions into the queue
		# note here we put all the 0 position into the queue, not only one 0.
		# this is not the same as the question number of islands 
        for i in range(row):
            for j in range(col):
                if mat[i][j] == 0:
                    queue.append((i, j))
                    
        # To create an empty set is the eye in this question        
        # set a visited set to record the visited position
        # why we choose a set, because it can cancel the repeated terms
        # for instance, in example 2, when we find neighbor 1 in the exactly middle position
        # we can find that  3 "0" can find this middle 1, if we do not use a set
        # it will happen that we will put the middle position in the queue for 3 times
        # we can see the details later in the BFS
        # note: to create an empty set, we can only use set(), not {}, because {} is for
        # creating dictionary
        visited = set()
        # we let visited set firstly add all the coordinate of 0 elements
        visited.update(queue)
        
        # set a count to deal with the value of corresponding position later
        # when we traverse each level, we can deal with the output value for corresponding position
        # we can see the details later in BFS
        count = 0
        
        # BFS
        while queue:
            # take out the 1st element coordinate in the queue
            for _ in range(len(queue)):
                x, y = queue.popleft()
                
                # find the neighbor
                for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    xx, yy = x + dx, y + dy

                    # skip the out border case
                    if xx < 0 or xx == row or yy < 0 or yy == col:
                        continue

                    # skip the visited position coordinate
                    if (xx, yy) in visited:
                        continue

                    # then the neigjbor will be only the position value with 1
                    # record such position coordinate, put them into the queue
                    queue.append((xx, yy))

                    # we put the coordinate of the neighbor into the visited set
                    visited.add((xx, yy))
                
                # update the cooresponding position value for (x, y)
                # here we split into 2 case
                if mat[x][y] == 0:
                    mat[x][y] = 0
                else:
                    mat[x][y] = mat[x][y] + count - 1
            
            # when each level traversal finishes, we count + 1
            count += 1
            
        return mat

效果：
Runtime: 1382 ms, faster than 21.81% of Python online submissions for 01 Matrix.
Memory Usage: 17 MB, less than 41.22% of Python online submissions for 01 Matrix.

reference：
https://leetcode.com/problems/01-matrix/discuss/1360023/Python-BFS-The-most-standard-template-to-solve-such-BFS-questions



