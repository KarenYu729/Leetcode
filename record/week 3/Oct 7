week 3
Oct 7


"""
--------------------------------------题目分割线----------------------------------------------
"""
142. Linked List Cycle II <medium>
输入：
ListNode
输出：
ListNode

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        fast = head
        slow = head
        while fast and fast.next:
            slow, fast = slow.next, fast.next.next

            if slow != fast:
                continue
            
            while head != slow:
                head, slow = head.next, slow.next

            return head

虽然难以理解但是就是在快慢指针重合的时候开始对比一个从头开始向后移动的指针是否跟慢指针重合

效果：
Runtime: 84 ms, faster than 30.50% of Python online submissions for Linked List Cycle II.
Memory Usage: 19.5 MB, less than 82.86% of Python online submissions for Linked List Cycle II.

reference：
https://leetcode.com/problems/linked-list-cycle-ii/discuss/2533976/Python-Fast-and-Easy-Solution




"""
--------------------------------------题目分割线----------------------------------------------
"""
179. Largest Number <medium>
输入：
int[]
输出：
str

"""
***********************解法一分割线***********************
"""
我最开始的思路：
也就是先都把列表中的数字变成字符串
然后把大一点的字符串串前面

但是这里有一个问题，例如在示例中：
Input: nums = [3,30,34,5,9]
Output: "9534330"
正常的排序（list.sort()）会吧30排在3前面
变成：
"9534303"

class Solution(object):
    def largestNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: str
        """
        for i, num in enumerate(nums):
            nums[i] = str(num)
        
        def compare(n1, n2):
            if n1+n2 > n2+n1:
                return -1
            else:
                return 1
        
        nums = sorted(nums, key=cmp_to_key(compare))
        return str(int(str(''.join(nums))))

效果：
Runtime: 21 ms, faster than 98.11% of Python online submissions for Largest Number.
Memory Usage: 13.8 MB, less than 5.66% of Python online submissions for Largest Number.

reference：
https://leetcode.com/problems/largest-number/discuss/2174897/python-easy-to-read-and-understand

一些说明：
①
Python 的 enumerate() 函数就像是一个神秘的黑箱，你无法简单地用一句话来概括这个函数的作用与用法。

enumerate() 函数属于非常有用的高级用法，而对于这一点，很多初学者甚至中级学者都没有意识到。这个函数的基本应用就是用来遍历一个集合对象，它在遍历的同时还可以得到当前元素的索引位置。

我们看一个例子：

names = ["Alice","Bob","Carl"]
for index,value in enumerate(names):
    print(f'{index}: {value}')

这段代码会输入如下内容：

0: Alice
1: Bob
2: Carl

正如你所看到的，这个循环遍历了names列表的所有元素，并通过增加从零开始的计数器变量来为每个元素生成索引。
②
sorted函数就比sort函数要强大许多了，sort只能对列表进行排序，sorted可以对所有可迭代类型进行排序，并且返回新的已排序的列表。语法如下：

sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list
1
一共可接受4个参数，含义分别如下：
1.可迭代类型，例如字典、列表、
2.比较函数
3.可迭代类型中某个属性，对给定元素的每一项进行排序
4.降序或升序
————————————————
版权声明：本文为CSDN博主「问就是啥也不是」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/bcfdsagbfcisbg/article/details/82801835

"""
***********************解法二分割线***********************
"""
class Solution(object):
    def largestNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: str
        """
        if not any(map(bool, nums)):
            return '0'
        
        nums = list(map(str, nums))
        if len(nums) < 2:
            return "".join(nums)
        
        def compare(x, y):
            return (int(nums[x]+nums[y])) > (int(nums[y]+nums[x]))
        
        for x in range(len(nums) - 1):
            y = x + 1
            while x < len(nums) and y < (len(nums)):
                if not compare(x,y):
                    nums[y], nums[x] = nums[x], nums[y]
                y+=1

        return "".join(nums) 

效果：
Runtime: 243 ms, faster than 5.03% of Python online submissions for Largest Number.
Memory Usage: 13.5 MB, less than 35.64% of Python online submissions for Largest Number.

reference：
https://leetcode.com/problems/largest-number/discuss/863698/Python-3-Simple-Solution-Explained-(video-%2B-code)

几点说明：
①
Python内置的any函数用来判断一个可迭代对象中是否至少有一个值为True，如果是则返回True，否则返回False。

相当于对可迭代对象的所有元素做or运算，但是返回的结果只有True或False。

print(any([1, 2, 3]))
print(any(['', 0, False]))
print(any(['', 1, False]))

输出：

True
False
True

和any()类似的是all()，参考：Python使用all()简化条件判断

all()是判断可迭代对象中每一个元素是否都是True，是则返回True，否则返回False。也就是说只要有一个是False则返回False。

但是它们对于空的迭代对象的返回结果是不一样的：

print(any([]))
print(all([]))
1
2
输出：

False
True

对于这个结果，可以理解为：

any是“至少有一个值为True时返回True”，空列表显然不满足，所以是False。
all是“至少有一个值为False时返回False”，空列表显然不满足，所以是True。
————————————————
版权声明：本文为CSDN博主「Channing Lewis」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/lycwhu/article/details/125725286

②
当不传入function时，map()就等同于zip()，将多个列表相同位置的元素归并到一个元组：

map(None,[2,4,6],[3,2,1])
# 结果如下
[(2,3),(4,2),(6,1)]

通过map还可以实现类型转换

将元组转换为list：

map(int,(1,2,3))
# 结果如下：
[1,2,3]

将字符串转换为list：

map(int,'1234')
# 结果如下：
[1,2,3,4]

提取字典中的key，并将结果放在一个list中：

map(int,{1:2,2:3,3:4})
# 结果如下
[1,2,3]
————————————————
版权声明：本文为CSDN博主「普通网友」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/m0_67401660/article/details/123788425

map(bool, nums):
[1]
[0]
[10,2]
->
[True]
[False]
[True, True]






"""
--------------------------------------题目分割线----------------------------------------------
"""
94. Binary Tree Inorder Traversal <easy>
输入：
TreeNode
输出：
int[]

"""
***********************解法一分割线***********************
"""
先说一下刚刚的乌龙事件
我以为这是前序遍历，人傻了
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        stack = []
        cur = root
        res = []
        
        while cur or stack:
            if cur:
                stack.append(cur)
                cur=cur.left
            else:
                cur = stack.pop()
                res.append(cur.val)
                cur = cur.right

        return res
 
效果：
Runtime: 17 ms, faster than 91.11% of Python online submissions for Binary Tree Inorder Traversal.
Memory Usage: 13.3 MB, less than 73.41% of Python online submissions for Binary Tree Inorder Traversal.

中序遍历就是先走到最下面，在按左根右顺序一路上去


"""
***********************解法二分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        res = []
        
        def dfs(node):
            if node != None:
                dfs(node.left)
                res.append(node.val)
                dfs(node.right)
        
        dfs(root)
        return res

效果：
Runtime: 32 ms, faster than 37.14% of Python online submissions for Binary Tree Inorder Traversal.
Memory Usage: 13.3 MB, less than 73.41% of Python online submissions for Binary Tree Inorder Traversal.


一点点题外话
我发现我之前这道题的笔记写错了，dfs的条件写成了==











