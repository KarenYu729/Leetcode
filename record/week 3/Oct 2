week 3
Oct 2


添加一个专题
queue

deque
deque 是Python标准库 collections 中的一个类，实现了两端都可以操作的队列，相当于双端队列，与Python的基本数据类型列表很相似。

Python实现双端队列参考：https://blog.csdn.net/weixin_43790276/article/details/104033394

使用Python实现双端队列时，使用了列表，可以用双端队列与 deque 对比，deque类中实现了很多方法
————————————————
版权声明：本文为CSDN博主「小斌哥ge」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_43790276/article/details/107749745


*****创建双向队列******
import collections
d = collections.deque()
print(d)

->输出：
deque([])


*****append******向右边添加一个元素******
import collections
d = collections.deque()
d.append(1)
d.append(2)
print(d)

->输出：
deque([1, 2])


*****appendleft******向左边添加一个元素******
import collections
d = collections.deque()
d.appendleft(1)
d.appendleft(2)
print(d)

->输出：
deque([2, 1])


*****clear******清空队列******
import collections
d = collections.deque()
d.append(1)
d.appendleft(2)
print(d)
d.clear()
print('clear queue:\n', d)

->输出：
deque([2, 1])
clear queue:
 deque([])


*****copy******浅拷贝******
import collections
d = collections.deque()
d.append(1)
d.appendleft(2)
copy_d = d.copy()
print('copy d queue: \n', copy_d)
print('initial queue: \n', d)
copy_d.clear()
print('clear copy d queue: \n', copy_d)
print('initial queue after clear copy queue: \n', d)

浅拷贝，清理拷贝的queue的时候不会影响其母本

->输出：
copy d queue: 
 deque([2, 1])
initial queue: 
 deque([2, 1])
clear copy d queue: 
 deque([])
initial queue after clear copy queue: 
 deque([2, 1])


*****count******返回指定元素出现的次数******
import collections
d = collections.deque()
d.append(1)
d.append(3)
d.append(3)
print(d.count(3))

->输出：
2


*****extend******queue向右边扩展（加个list）******
import collections
d = collections.deque()
d.append(1)
d.extend([3,4,5])
print(d)

->输出：
deque([1, 3, 4, 5])


*****extendleft******queue向左边扩展（加个list）******
import collections
d = collections.deque()
d.append(1)
d.extendleft([3,4,5])
print(d)

这里不是直接把list加在原来queue的左边，是按照顺序一个一个的添加到左边

->输出：
deque([5, 4, 3, 1])


*****index******查找某个元素的索引位置******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print(d)
print(d.index('e'))
print(d.index('c', 0, 3)) # 指定查找区间
print(d.index('w'))

->输出：
Traceback (most recent call last):
  File "……/……/…….py", line 95, in <module>
    print(d.index('w'))
ValueError: 'w' is not in deque
deque(['a', 'b', 'c', 'd', 'e', 'f'])
4
2


*****insert******在指定index插入元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
d.insert(2, 'w')
print(d)
print(d.index('e'))
print(d.index('c', 0, 4)) #指定查找区间,左闭右开区间
print(d.index('w'))

->输出：
deque(['a', 'b', 'w', 'c', 'd', 'e', 'f'])
5
3
2


*****pop******获取队尾元素，并去掉队尾元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: ', d)
pop_e = d.pop()
print('pop element: ', pop_e)
print('after pop: ', d)
d.pop()
print('after pop: ', d)

->输出：
initial queue:  deque(['a', 'b', 'c', 'd', 'e', 'f'])
pop element:  f
after pop:  deque(['a', 'b', 'c', 'd', 'e'])
after pop:  deque(['a', 'b', 'c', 'd'])


*****popleft******获取队头元素，并去掉队头元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: ', d)
pop_e = d.popleft()
print('pop element: ', pop_e)
print('after pop: ', d)
d.pop()
print('after pop: ', d)

->输出：
initial queue:  deque(['a', 'b', 'c', 'd', 'e', 'f'])
pop element:  a
after pop:  deque(['b', 'c', 'd', 'e', 'f'])
after pop:  deque(['b', 'c', 'd', 'e'])


*****remove******删除指定的元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: \n', d)
d.remove('c')
print('queue after remove: \n', d)

->输出：
initial queue: 
 deque(['a', 'b', 'c', 'd', 'e', 'f'])
queue after remove: 
 deque(['a', 'b', 'd', 'e', 'f'])


*****reverse******翻转队列******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: \n', d)
d.reverse()
print('reverse queue: \n', d)

->输出：
initial queue: 
 deque(['a', 'b', 'c', 'd', 'e', 'f'])
reverse queue: 
 deque(['f', 'e', 'd', 'c', 'b', 'a'])


*****rotate******队列旋转指定次数******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: \n', d)
d.rotate(2)
print('rotate queue: \n', d)

->输出：
initial queue: 
 deque(['a', 'b', 'c', 'd', 'e', 'f'])
rotate queue: 
 deque(['e', 'f', 'a', 'b', 'c', 'd'])


"""
--------------------------------------题目分割线----------------------------------------------
"""
232. Implement Queue using Stacks <easy>
输入：
str[str[]]
int[int[]]
输出：
int[]

其实开始没仔细看题，直接就上了，很惨的WA了，但是实际上跟我想的不一样，似乎不用管如果来来回回操作怎么样
而且要两个stack
就像凉水一样，那两个杯子来来回回荡
进杯子A是顺序的，倒进杯子B就是逆序的

class MyQueue(object):

    def __init__(self):
        self.front = []
        self.rear = []

    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        self.front.append(x)

    def pop(self):
        """
        :rtype: int
        """
        """Since in stack we can only pop element from last.
        We first pop all the element from stack1 and append it to stack2.
        After that we pop the last element from stack2"""
        if not self.rear:
            while self.front:
                self.rear.append(self.front.pop())
            
        return self.rear.pop()
        
        
    def peek(self):
        """
        :rtype: int
        """
        if not self.rear:
            while self.front:
                self.rear.append(self.front.pop())

        return self.rear[-1]

    
    def empty(self):
        """
        :rtype: bool
        """
        return len(self.front)+len(self.rear)==0


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()

效果：
Runtime: 37 ms, faster than 12.71% of Python online submissions for Implement Queue using Stacks.
Memory Usage: 13.5 MB, less than 34.54% of Python online submissions for Implement Queue using Stacks.




"""
--------------------------------------题目分割线----------------------------------------------
"""
225. Implement Stack using Queues <easy>
输入：
str[str[]]
int[int[]]
输出：
int[]

"""
***********************解法一分割线***********************
"""
用stack模拟stack
class MyStack(object):

    def __init__(self):
        self.stack = []

    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        self.stack.append(x)
        
    def pop(self):
        """
        :rtype: int
        """
        return self.stack.pop()

    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1]

    def empty(self):
        """
        :rtype: bool
        """
        return len(self.stack)==0


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

效果：
Runtime: 22 ms, faster than 73.42% of Python online submissions for Implement Stack using Queues.
Memory Usage: 13.4 MB, less than 63.29% of Python online submissions for Implement Stack using Queues.


"""
***********************解法二分割线***********************
"""
用今天中午过的新技能deque
class MyStack(object):

    def __init__(self):
        self.queue = collections.deque()

    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        self.queue.append(x)
        
    def pop(self):
        """
        :rtype: int
        """
        return self.queue.pop()

    def top(self):
        """
        :rtype: int
        """
        return self.queue[-1]

    def empty(self):
        """
        :rtype: bool
        """
        return len(self.queue)==0


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

效果：
Runtime: 12 ms, faster than 97.78% of Python online submissions for Implement Stack using Queues.
Memory Usage: 13.3 MB, less than 87.50% of Python online submissions for Implement Stack using Queues.



"""
--------------------------------------题目分割线----------------------------------------------
"""
239. Sliding Window Maximum <hard>
输入：
int[]
int
输出：
int[]

这里不能直接用sliding Windows，会TLE
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        output = []
        maxQueue = deque()

        i,j = 0,0
        n = len(nums)

        while(j < n):
            #Remove all elements from deque that are smaller than current element at index j
            while(len(maxQueue) > 0 and nums[j] > maxQueue[-1]): maxQueue.pop()  
                
            #And once removed, then put the j index element in the Queue
            maxQueue.append(nums[j])

            #Check Window size
            if(j - i + 1 < k): j += 1
            #If Window size = k
            else:
                #Put the maximum element in this window in the output
                output.append(maxQueue[0])
                
                #Before sliding the window, check if the element we are not going to include in next window is max element or not
                # It it is the max element, that means we remove it from deQue as well
                if(nums[i] == maxQueue[0]): maxQueue.popleft()
                #Slide the window
                i += 1
                j += 1

        return output

维持一个单调递减的队列
i是队列的开头，j是当前的位置
总是把最大的数字放到队首

效果：
Runtime: 1526 ms, faster than 91.68% of Python online submissions for Sliding Window Maximum.
Memory Usage: 31.1 MB, less than 33.30% of Python online submissions for Sliding Window Maximum.

reference：
https://leetcode.com/problems/sliding-window-maximum/discuss/2565755/Python-SLIDING-WINDOW-DEQUE-EXPLAINED


queue的题太少了，做一下BFS看看


"""
--------------------------------------题目分割线----------------------------------------------
"""
130. Surrounded Regions <medium>
输入：
str[str[]]
输出：
无输出

简言之，这道题就是消灭孤岛

这道题可以用DFS解，介于我稍微熟悉一点DFS，所以就先DFS。
逻辑就是一条路走到黑
在这里有个问题，不能直接判断可以翻转就改，否则会影响其他位置的判断
之所以采用DFS，是因为我花了一个小时写了暴力……全是if，太离奇了，写不下去了

"""
***********************解法一分割线***********************
"""
一些文艺复兴的方法
文艺复兴点：
1. dir = [[-1,0],[0,1],[1,0],[0,-1]]
向哪个方向走，↑ → ↓ ←
2. if row>=0 and row<n and col>=0 and col<m and board[row][col]=='O' and not visited[row][col]
需要走迷宫，只能在陆地（小岛）上走，0是海相当于迷宫的墙壁，走遍小岛所有的没有走过的点，标记做过的点
3. visited = [[0 for _ in range(m)] for i in range(n)]
标记
class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """        
        n = len(board)
        m = len(board[0])
        
        def dfs(i,j):
            visited[i][j]=1
            dir = [[-1,0],[0,1],[1,0],[0,-1]]
            for a,b in dir:
                row = a+i
                col = b+j
                if row>=0 and row<n and col>=0 and col<m and board[row][col]=='O' and not visited[row][col]:
                    dfs(row,col)
        visited = [[0 for _ in range(m)] for i in range(n)]
        for j in range(m):
            if not visited[0][j] and board[0][j]=='O':
                dfs(0,j)
            if not visited[n-1][j] and board[n-1][j]=='O':
                dfs(n-1,j)
        for i in range(n):
            if not visited[i][0] and board[i][0]=='O':
                dfs(i,0)
            if not visited[i][m-1] and board[i][m-1]=='O':
                dfs(i,m-1)
        for i in range(n):
            for j in range(m):
                if not visited[i][j] and board[i][j]=='O':
                    board[i][j]='X'

注意这里为什么只判断边界（对行边界和列边界开扫描）

Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.

->边界不翻转
->有免死金牌（其联通的陆地是不能被翻转的），也就是说连在边界上，所以只要从每个边界上的点向中间能走的位置探索，其能走到的最远的距离都标记上，最后给没走过且是陆地的小岛翻转

效果：
Runtime: 217 ms, faster than 47.59% of Python online submissions for Surrounded Regions.
Memory Usage: 19.3 MB, less than 24.06% of Python online submissions for Surrounded Regions.

reference：
https://leetcode.com/problems/surrounded-regions/discuss/2652417/Python-way-Simple-DFS

类似的，也可以不适用标记数组，而直接在原来的矩阵上进行标记（用另一种字符标记不能翻转的点），遍历完整张表之后，翻转未被标志的点，恢复被标志的点

class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """        
        def dfs(r,c,board):
            if r<0 or c<0 or r>=row or c>=col or board[r][c]!='O':
                
                return
            board[r][c]='#'
            dfs(r-1,c,board)
            dfs(r+1,c,board)
            dfs(r,c-1,board)
            dfs(r,c+1,board)
        row,col=len(board),len(board[0])
        for m in range(row):
            for n in range(col):
                if m ==0 or m==row-1:
                    dfs(m,n,board)
                if n==0 or n==col-1:
                    dfs(m,n,board)
        for m in range(row):
            for n in range(col):
                if board[m][n]=='O':
                    board[m][n]='X'
                if board[m][n]=='#':
                    board[m][n]='O' 

效果：
Runtime: 215 ms, faster than 48.55% of Python online submissions for Surrounded Regions.
Memory Usage: 18.9 MB, less than 95.83% of Python online submissions for Surrounded Regions.

reference:
https://leetcode.com/problems/surrounded-regions/discuss/2647256/Easy-DFSBFS-Imp...-in-Python



"""
***********************解法二分割线***********************
"""
class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """        
        row,col=len(board),len(board[0])
        q=deque()
        
        for m in range(row):
            for n in range(col):
                if m ==0 or m==row-1: 
                    if board[m][n]=='O':
                        board[m][n]='#' 
                        q.append((m,n))
                    
                if n==0 or n==col-1:
                    if board[m][n]=='O':
                        board[m][n]='#' 
                        q.append((m,n))
        delta=[(0,1),(0,-1),(1,0),(-1,0)]            
        while q:
            i,j=q.popleft()
            
            for a,b in delta:
                
                if 0<=a+i<row and 0<=b+j<col and board[a+i][b+j]=='O':
                    board[a+i][b+j]='#'
                    q.append((a+i,b+j))
                    
        for m in range(row):
            for n in range(col):
                if board[m][n]=='O':
                    board[m][n]='X'
                if board[m][n]=='#':
                    board[m][n]='O' 

效果：
Runtime: 116 ms, faster than 89.95% of Python online submissions for Surrounded Regions.
Memory Usage: 18.8 MB, less than 98.72% of Python online submissions for Surrounded Regions.

reference:
https://leetcode.com/problems/surrounded-regions/discuss/2647256/Easy-DFSBFS-Imp...-in-Python

先把边缘的岛屿标志出来，然后再每个标记的点向四周走看要不要标记
最后还是标记恢复，没标记翻转
 或者依旧按照之前的，一次遍历标记完边界

class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """        
        queue = collections.deque([])
        for r in range(len(board)):
            for c in range(len(board[0])):
                if (r in [0, len(board)-1] or c in [0, len(board[0])-1]) and board[r][c] == "O":
                    queue.append((r, c))
        while queue:
            r, c = queue.popleft()
            if 0<=r<len(board) and 0<=c<len(board[0]) and board[r][c] == "O":
                board[r][c] = "."
                queue.extend([(r-1, c),(r+1, c),(r, c-1),(r, c+1)])
        
        for r in range(len(board)):
            for c in range(len(board[0])):
                if board[r][c] == "O":
                    board[r][c] = "X"
                elif board[r][c] == ".":
                    board[r][c] = "O"

效果：
Runtime: 281 ms, faster than 25.24% of Python online submissions for Surrounded Regions.
Memory Usage: 19 MB, less than 84.28% of Python online submissions for Surrounded Regions.

reference：
https://leetcode.com/problems/surrounded-regions/discuss/41652/Python-easy-to-understand-DFS-and-BFS-solutions



"""
--------------------------------------题目分割线----------------------------------------------
"""
200. Number of Islands <medium>
输入：
str[str[]]
输出：
int

"""
***********************解法一分割线***********************
"""
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        r,c,ans=len(grid),len(grid[0]),0
        def dfs(i,j):
            if i<0 or j<0 or i>r-1 or j>c-1 or grid[i][j] != "1":  
                return  
            
            grid[i][j] = "*"
            
            dfs(i+1, j)
            dfs(i-1, j) 
            dfs(i, j+1)
            dfs(i, j-1)
           
        for i in range(r):
            for j in range(c):
                if grid[i][j] == "1":
                    dfs(i,j)
                    ans +=1 
                    
        return ans

效果：
Runtime: 244 ms, faster than 96.86% of Python online submissions for Number of Islands.
Memory Usage: 28.9 MB, less than 61.74% of Python online submissions for Number of Islands.

reference：
https://leetcode.com/problems/number-of-islands/discuss/2497928/Easy-implementation-with-beats-70-runtime-DFS-recursive

碰壁就+1


"""
***********************解法二分割线***********************
"""
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        row, col = len(grid), len(grid[0])
        res = 0
        def bfs(i, j):
            q = collections.deque()
            q.append((i, j))
            while q:
                r, c = q.popleft()
                if ( not 0 <= r < row) or (not 0 <= c < col) or (grid[r][c] == '0'): 
                    continue
                grid[r][c] = '0'
                q.append((r-1, c))
                q.append((r+1, c))
                q.append((r, c-1))
                q.append((r, c+1))
            
        for i in range(row):
            for j in range(col):
                if grid[i][j] == '1':
                    res += 1
                    bfs(i, j)
        
        return res


效果：
Runtime: 743 ms, faster than 24.74% of Python online submissions for Number of Islands.
Memory Usage: 28.5 MB, less than 96.67% of Python online submissions for Number of Islands.

reference：
https://leetcode.com/problems/number-of-islands/discuss/2160946/Python3-Very-Concise-AC-Solution-Both-DFS-BFS
