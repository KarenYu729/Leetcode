week 3
Oct 2


添加一个专题
queue

deque
deque 是Python标准库 collections 中的一个类，实现了两端都可以操作的队列，相当于双端队列，与Python的基本数据类型列表很相似。

Python实现双端队列参考：https://blog.csdn.net/weixin_43790276/article/details/104033394

使用Python实现双端队列时，使用了列表，可以用双端队列与 deque 对比，deque类中实现了很多方法
————————————————
版权声明：本文为CSDN博主「小斌哥ge」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_43790276/article/details/107749745


*****创建双向队列******
import collections
d = collections.deque()
print(d)

->输出：
deque([])


*****append******向右边添加一个元素******
import collections
d = collections.deque()
d.append(1)
d.append(2)
print(d)

->输出：
deque([1, 2])


*****appendleft******向左边添加一个元素******
import collections
d = collections.deque()
d.appendleft(1)
d.appendleft(2)
print(d)

->输出：
deque([2, 1])


*****clear******清空队列******
import collections
d = collections.deque()
d.append(1)
d.appendleft(2)
print(d)
d.clear()
print('clear queue:\n', d)

->输出：
deque([2, 1])
clear queue:
 deque([])


*****copy******浅拷贝******
import collections
d = collections.deque()
d.append(1)
d.appendleft(2)
copy_d = d.copy()
print('copy d queue: \n', copy_d)
print('initial queue: \n', d)
copy_d.clear()
print('clear copy d queue: \n', copy_d)
print('initial queue after clear copy queue: \n', d)

浅拷贝，清理拷贝的queue的时候不会影响其母本

->输出：
copy d queue: 
 deque([2, 1])
initial queue: 
 deque([2, 1])
clear copy d queue: 
 deque([])
initial queue after clear copy queue: 
 deque([2, 1])


*****count******返回指定元素出现的次数******
import collections
d = collections.deque()
d.append(1)
d.append(3)
d.append(3)
print(d.count(3))

->输出：
2


*****extend******queue向右边扩展（加个list）******
import collections
d = collections.deque()
d.append(1)
d.extend([3,4,5])
print(d)

->输出：
deque([1, 3, 4, 5])


*****extendleft******queue向左边扩展（加个list）******
import collections
d = collections.deque()
d.append(1)
d.extendleft([3,4,5])
print(d)

这里不是直接把list加在原来queue的左边，是按照顺序一个一个的添加到左边

->输出：
deque([5, 4, 3, 1])


*****index******查找某个元素的索引位置******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print(d)
print(d.index('e'))
print(d.index('c', 0, 3)) # 指定查找区间
print(d.index('w'))

->输出：
Traceback (most recent call last):
  File "……/……/…….py", line 95, in <module>
    print(d.index('w'))
ValueError: 'w' is not in deque
deque(['a', 'b', 'c', 'd', 'e', 'f'])
4
2


*****insert******在指定index插入元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
d.insert(2, 'w')
print(d)
print(d.index('e'))
print(d.index('c', 0, 4)) #指定查找区间,左闭右开区间
print(d.index('w'))

->输出：
deque(['a', 'b', 'w', 'c', 'd', 'e', 'f'])
5
3
2


*****pop******获取队尾元素，并去掉队尾元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: ', d)
pop_e = d.pop()
print('pop element: ', pop_e)
print('after pop: ', d)
d.pop()
print('after pop: ', d)

->输出：
initial queue:  deque(['a', 'b', 'c', 'd', 'e', 'f'])
pop element:  f
after pop:  deque(['a', 'b', 'c', 'd', 'e'])
after pop:  deque(['a', 'b', 'c', 'd'])


*****popleft******获取队头元素，并去掉队头元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: ', d)
pop_e = d.popleft()
print('pop element: ', pop_e)
print('after pop: ', d)
d.pop()
print('after pop: ', d)

->输出：
initial queue:  deque(['a', 'b', 'c', 'd', 'e', 'f'])
pop element:  a
after pop:  deque(['b', 'c', 'd', 'e', 'f'])
after pop:  deque(['b', 'c', 'd', 'e'])


*****remove******删除指定的元素******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: \n', d)
d.remove('c')
print('queue after remove: \n', d)

->输出：
initial queue: 
 deque(['a', 'b', 'c', 'd', 'e', 'f'])
queue after remove: 
 deque(['a', 'b', 'd', 'e', 'f'])


*****reverse******翻转队列******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: \n', d)
d.reverse()
print('reverse queue: \n', d)

->输出：
initial queue: 
 deque(['a', 'b', 'c', 'd', 'e', 'f'])
reverse queue: 
 deque(['f', 'e', 'd', 'c', 'b', 'a'])


*****rotate******队列旋转指定次数******
import collections
d = collections.deque()
d.extend(['a', 'b', 'c', 'd', 'e', 'f'])
print('initial queue: \n', d)
d.rotate(2)
print('rotate queue: \n', d)

->输出：
initial queue: 
 deque(['a', 'b', 'c', 'd', 'e', 'f'])
rotate queue: 
 deque(['e', 'f', 'a', 'b', 'c', 'd'])



