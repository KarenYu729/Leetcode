week 3
Oct 8


"""
--------------------------------------题目分割线----------------------------------------------
"""
144. Binary Tree Preorder Traversal <easy>
输入：
TreeNode
输出：
int[]

"""
***********************解法一分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        cur = root
        res = []
        stack = []
        
        while stack or cur:
            while cur:
                stack.append(cur)
                res.append(cur.val)
                cur = cur.left
            cur = stack.pop()
            cur = cur.right
        
        return res

效果：
Runtime: 38 ms, faster than 14.47% of Python online submissions for Binary Tree Preorder Traversal.
Memory Usage: 13.2 MB, less than 91.51% of Python online submissions for Binary Tree Preorder Traversal.

"""
***********************解法二分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        
        if not root:
            return res
        
        def dfs(node):
            if node != None:
                res.append(node.val)
                dfs(node.left)
                dfs(node.right)
        
        dfs(root)
        return res

效果：
Runtime: 40 ms, faster than 9.69% of Python online submissions for Binary Tree Preorder Traversal.
Memory Usage: 13.3 MB, less than 91.51% of Python online submissions for Binary Tree Preorder Traversal.



"""
--------------------------------------题目分割线----------------------------------------------
"""
145. Binary Tree Postorder Traversal <easy>
输入：
TreeNode
输出：
int[]

"""
***********************解法一分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        stack = []
        res = []
        cur = root
        
        while cur or stack:
            while cur:
                stack.append(cur)
                res.append(cur.val)
                cur=cur.right
            cur = stack.pop()
            cur = cur.left
        
        return res[::-1]

效果：
Runtime: 35 ms, faster than 23.22% of Python online submissions for Binary Tree Postorder Traversal.
Memory Usage: 13.4 MB, less than 46.38% of Python online submissions for Binary Tree Postorder Traversal.


"""
***********************解法二分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        
        def dfs(node):
            if node != None:
                res.append(node.val)
                dfs(node.right)
                dfs(node.left)
        
        dfs(root)
        return res[::-1]

效果：
Runtime: 28 ms, faster than 51.88% of Python online submissions for Binary Tree Postorder Traversal.
Memory Usage: 13.5 MB, less than 46.38% of Python online submissions for Binary Tree Postorder Traversal.




"""
--------------------------------------题目分割线----------------------------------------------
"""
98. Validate Binary Search Tree <medium>
输入：
TreeNode
输出：
bool


"""
***********************解法一分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        prev = None
        current = None
        stack = []
        node = root
        while stack or node:
            if node:
                stack.append(node)
                node = node.left
            else :
                node = stack.pop()
                prev, current = current, node.val
                node = node.right
            if prev is not None and current is not None and prev >= current:
                return False
        return True

效果
Runtime: 31 ms, faster than 93.72% of Python online submissions for Validate Binary Search Tree.
Memory Usage: 18 MB, less than 65.28% of Python online submissions for Validate Binary Search Tree.

reference：
https://leetcode.com/problems/validate-binary-search-tree/discuss/2649554/Python-simple-solution-using-Iterative-DFS

注意：
这里if prev is not None and current is not None
不能写if prev and current
来表示二者皆非空


"""
***********************解法二分割线***********************
"""
之前一直错的点是在调用dfs的时候没有return
（卡了很久）
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        def dfs(node, left, right):
            if not node:
                return True
            
            if left<node.val<right:
                return dfs(node.left, left, node.val) and dfs(node.right, node.val, right)
            
            return False
        
        return dfs(root, float("-inf"), float("inf"))

效果：
Runtime: 55 ms, faster than 54.99% of Python online submissions for Validate Binary Search Tree.
Memory Usage: 17.8 MB, less than 83.57% of Python online submissions for Validate Binary Search Tree.




"""
--------------------------------------题目分割线----------------------------------------------
"""
112. Path Sum <easy>
输入：
TreeNode
输出：
bool


"""
***********************解法一分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def hasPathSum(self, root, targetSum):
        """
        :type root: TreeNode
        :type targetSum: int
        :rtype: bool
        """
        def dfs(node, total):
            if not node:
                return
            
            total += node.val
            
            if (not node.left and not node.right) and targetSum == total:
                return True
            
            return dfs(node.left,total) or dfs(node.right,total)
        return dfs(root,0)

效果：
Runtime: 73 ms, faster than 10.95% of Python online submissions for Path Sum.
Memory Usage: 15.2 MB, less than 71.35% of Python online submissions for Path Sum.

reference：
https://leetcode.com/problems/path-sum/discuss/2658153/Python-or-Very-easy-approach-using-dfs

"""
***********************解法二分割线***********************
"""
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def hasPathSum(self, root, targetSum):
        """
        :type root: TreeNode
        :type targetSum: int
        :rtype: bool
        """
        # Edge case: empty tree
        if not root:
            return False
        
        # DFS stack (current node, current path sum from root to current node)
        stack = [(root, root.val)]
        while stack:
            currNode, currSum = stack.pop()
            # If currNode is a leaf, check the path sum
            if not currNode.left and not currNode.right and currSum == targetSum:
                return True
            # Otherwise, push children onto the stack
            else:
                if currNode.left:
                    stack.append((currNode.left, currSum + currNode.left.val))
                if currNode.right:
                    stack.append((currNode.right, currSum + currNode.right.val))
                
        # Target sum not found
        return False

效果：
Runtime: 58 ms, faster than 43.57% of Python online submissions for Path Sum.
Memory Usage: 15.3 MB, less than 46.56% of Python online submissions for Path Sum.

reference：
https://leetcode.com/problems/path-sum/discuss/2661184/Python-Easy-Stack-DFS-Explained















