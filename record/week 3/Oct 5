week 3
Oct 5

今天看完了survival analysis
总感觉是鸡肋



"""
--------------------------------------题目分割线----------------------------------------------
"""
73. Set Matrix Zeroes <medium>
输入：
int[int[]]
输出：
无

class Solution(object):
    def setZeroes(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify matrix in-place instead.
        """
        row = len(matrix)
        col = len(matrix[0])
        
        rowStack = set()
        colStack = set()
        
        for i in range(row):
            for j in range(col):
                if matrix[i][j] == 0:
                    rowStack.add(i)
                    colStack.add(j)
                    
        for i in range(row):
            for j in range(col):
                if i in rowStack or j in colStack:
                    matrix[i][j] = 0


效果：
Runtime: 239 ms, faster than 25.01% of Python online submissions for Set Matrix Zeroes.
Memory Usage: 14.5 MB, less than 21.28% of Python online submissions for Set Matrix Zeroes.




"""
--------------------------------------题目分割线----------------------------------------------
"""
217. Contains Duplicate <easy>
输入：
int
输出：
bool

class Solution(object):
    def containsDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        return len(set(nums)) < len(nums)

效果：
Runtime: 1030 ms, faster than 8.53% of Python online submissions for Contains Duplicate.
Memory Usage: 23.9 MB, less than 63.31% of Python online submissions for Contains Duplicate.




"""
--------------------------------------题目分割线----------------------------------------------
"""
219. Contains Duplicate II <easy>
输入：
int[]
int
输出：
bool

class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        hashmap = {}
        for i in range(len(nums)):
            if nums[i] not in hashmap:
                hashmap[nums[i]] = [i]
            else:
                hashmap[nums[i]].append(i)
        
        for i in hashmap.values():
            if len(i) == 0:
                continue
            else:
                for j in range(len(i) - 1):
                    if (i[j+1] - i[j]) <= k:
                        return True
        return False

效果：
Runtime: 1653 ms, faster than 5.04% of Python online submissions for Contains Duplicate II.
Memory Usage: 31.4 MB, less than 8.48% of Python online submissions for Contains Duplicate II.

reference：
https://leetcode.com/problems/contains-duplicate-ii/discuss/2666207/Python3-solution-using-hashmap

这里，一开始想的是记录每个数字最后出现的位置，然后再遍历整个数组，只要中间间隔足够大就行，但是现在发现反过来的其实是找是不是间隔小orz




"""
--------------------------------------题目分割线----------------------------------------------
"""
220. Contains Duplicate III <hard>
输入：
int[]
int
int
输出：
bool

先说一下，绝对不能双层for循环，绝对会TLE
虽然我开始猜到肯定不是双层的for循环，但是在discussion里面有很多题解是双层for循环
私以为LeetCode应该调整过题目本身和测试允许的时间和空间
这道题不太有价值

from sortedcontainers import SortedList
    
class Solution(object):
    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):
        """
        :type nums: List[int]
        :type indexDiff: int
        :type valueDiff: int
        :rtype: bool
        """
        window = SortedList()
        for i in range(len(nums)):
            if i > indexDiff: 
                window.remove(nums[i-indexDiff-1])   
            idx1 = SortedList.bisect_left(window, nums[i] - valueDiff)
            idx2 = SortedList.bisect_right(window, nums[i] + valueDiff)
            
            if idx1 != idx2 and idx1 != len(window): 
                return True
            
            window.add(nums[i])
        
        return False


效果：
Runtime: 2595 ms, faster than 7.86% of Python online submissions for Contains Duplicate III.
Memory Usage: 26.4 MB, less than 17.86% of Python online submissions for Contains Duplicate III.

reference：
https://leetcode.com/problems/contains-duplicate-iii/discuss/2048581/Python-or-Sliding-Window-%2B-SortedList-or-Simple-Solution
