week 3
Oct 3

今天听spam甄别的时候突然就get到了bag of words了


"""
--------------------------------------题目分割线----------------------------------------------
"""
121. Best Time to Buy and Sell Stock <easy>
输入：
int[]
输出：
int

"""
***********************解法一分割线***********************
"""
应该就是暴力破解：
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        maxProfit=0
        minBuy=prices[0]
        
        for sellPrice in prices:
            if sellPrice<minBuy:
                minBuy = sellPrice
            if sellPrice-minBuy>maxProfit:
                maxProfit=sellPrice-minBuy
        
        return maxProfit

每次都比较当前的价格和之前最小的价格的大小，如果当前价格更小就把这个价格定义为最小值
然后再看卖价和买价的大小差异，总是把最大的差价赋值给maxProfit

这样看这里应该是greedy

效果：
Runtime: 1801 ms, faster than 32.54% of Python online submissions for Best Time to Buy and Sell Stock.
Memory Usage: 21.6 MB, less than 99.41% of Python online submissions for Best Time to Buy and Sell Stock.


"""
***********************解法二分割线***********************
"""
很显然可以DP做
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        dp = [0]*len(prices)
        
        for i in range(1, len(prices)):
            dp[i] = max(dp[i-1]+prices[i]-prices[i-1],0)
        
        return max(dp)

效果：
Runtime: 1862 ms, faster than 29.50% of Python online submissions for Best Time to Buy and Sell Stock.
Memory Usage: 24.6 MB, less than 12.05% of Python online submissions for Best Time to Buy and Sell Stock.



"""
--------------------------------------题目分割线----------------------------------------------
"""
122. Best Time to Buy and Sell Stock II <medium>
输入：
int[]
输出：
int

"""
***********************解法一分割线***********************
"""
还是先贪心
策略是：
只要有赚钱就卖，完全不做长期考虑
反正贪心就是鼠目寸光嘛（我喜欢）
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        maxProfit=0
        BuyPrice=prices[0]
        
        for i in range(len(prices)):
            if prices[i]<BuyPrice:
                BuyPrice=prices[i]
            if prices[i]-BuyPrice>0:
                maxProfit+=prices[i]-BuyPrice
                BuyPrice=prices[i]
        
        return maxProfit

效果：
Runtime: 48 ms, faster than 86.45% of Python online submissions for Best Time to Buy and Sell Stock II.
Memory Usage: 14.5 MB, less than 41.61% of Python online submissions for Best Time to Buy and Sell Stock II.

"""
***********************解法二分割线***********************
"""
还是DP
不过等会儿再写了，要去上课了

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        dp = [0]*len(prices)
        
        for i in range(1, len(prices)):
            dp[i] = dp[i-1]+max(prices[i]-prices[i-1],0)
        
        return dp[-1]

效果：
Runtime: 113 ms, faster than 9.45% of Python online submissions for Best Time to Buy and Sell Stock II.
Memory Usage: 14.7 MB, less than 11.42% of Python online submissions for Best Time to Buy and Sell Stock II.

我吐了真的，之前忘记保存了，全没了





"""
--------------------------------------题目分割线----------------------------------------------
"""
123. Best Time to Buy and Sell Stock III <hard>
输入：
int[]
输出：
int

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        curr_min = float("inf")
        dp = [0]*(len(prices)+1)
        for i in range(len(prices)):
            curr_min = min(curr_min ,prices[i])
            dp[i+1] = max(prices[i]-curr_min, dp[i])

        ans = max(dp[-1], 0)
        curr_max = 0
        for j in range(len(prices)-1,0,-1):
            curr_max = max(curr_max, prices[j])
            ans = max(ans, dp[j] + curr_max - prices[j])
        return ans

效果：
Runtime: 2636 ms, faster than 19.07% of Python online submissions for Best Time to Buy and Sell Stock III.
Memory Usage: 24.8 MB, less than 69.38% of Python online submissions for Best Time to Buy and Sell Stock III.

reference：
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/1185413/Python-solution-with-explanation-faster-than-98

If no overlapped part, why not dividing the prices into two non-overalpped array and calculate the maximum summation
First we traverse from left to right, calculate the maximum profit we can earn before prices[i]
Then we traverse from right to left, calculate the maximum profit we can earn after prices[j]


class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        buy, sell = [float('inf')]*2, [0]*2
        for price in prices:
            for i in range(2): 
                if i: 
                    buy[i] = min(buy[i], price - sell[i-1])
                else: 
                    buy[i] = min(buy[i], price)
                sell[i] = max(sell[i], price - buy[i])
        return sell[1]

效果：
Runtime: 2620 ms, faster than 19.28% of Python online submissions for Best Time to Buy and Sell Stock III.
Memory Usage: 25 MB, less than 50.75% of Python online submissions for Best Time to Buy and Sell Stock III.

reference：
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/2040316/O(n)timeBEATS-99.97-MEMORYSPEED-0ms-MAY-2022




"""
--------------------------------------题目分割线----------------------------------------------
"""
188. Best Time to Buy and Sell Stock IV <hard>
输入：
int[]
输出：
int


class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        buy, sell = [float('inf')]*k, [0]*k
        for price in prices:
            for i in range(k): 
                if i: 
                    buy[i] = min(buy[i], price - sell[i-1])
                else: 
                    buy[i] = min(buy[i], price)
                sell[i] = max(sell[i], price - buy[i])
        return sell[k-1]

效果：
Runtime: 205 ms, faster than 30.26% of Python online submissions for Best Time to Buy and Sell Stock IV.
Memory Usage: 13.5 MB, less than 60.67% of Python online submissions for Best Time to Buy and Sell Stock IV.

