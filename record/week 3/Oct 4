week 3
Oct 4



"""
--------------------------------------题目分割线----------------------------------------------
"""
316. Remove Duplicate Letters <medium>
输入：
str
输出：
str


"""
***********************解法一分割线***********************
"""
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        charCnt = Counter(s)
        stack = []
         
        
        for i in range(len(s)):
            if s[i] in stack:
                charCnt[s[i]] -= 1
                continue
            while stack and stack[-1]>s[i] and charCnt[stack[-1]]>0:
                stack.pop()
            
            charCnt[s[i]]-=1
            stack.append(s[i])
                
            
        return ''.join(stack)

Runtime: 33 ms, faster than 77.74% of Python online submissions for Remove Duplicate Letters.
Memory Usage: 13.9 MB, less than 24.38% of Python online submissions for Remove Duplicate Letters.

直到最后一个出现才添加


"""
***********************解法二分割线***********************
"""
其实还是单调栈，但是终于写出了自己的最初的思路
这道题其实有两个顺序，一个是字母表，这个是我们维护单调栈的原理之一，也就是要按字母的顺序递增
第二个是，如果这个字母虽然逆了字典序，但是这是这个字母出现的最后的位置，我们也不能给扔出去

"bcabc"
"cbacdcbc"
"dcbadcba"
"abacb"

->
"abc"
"acdb"
"adcb"
"abc"

class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []
        stack.append(s[0])
        last_idx = {}
        for i in range(len(s)):
            last_idx[s[i]] = i
        
        for i in range(1, len(s)):
            
            while stack and stack[-1]>s[i] and last_idx[stack[-1]] > i and s[i] not in stack:
                stack.pop()
            if s[i] not in stack:
                stack.append(s[i])

        return ''.join(stack)

效果：
Runtime: 37 ms, faster than 65.72% of Python online submissions for Remove Duplicate Letters.
Memory Usage: 13.7 MB, less than 63.96% of Python online submissions for Remove Duplicate Letters.

整理一下：
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []
        stack.append(s[0])
        last_idx = {}
        for i in range(len(s)):
            last_idx[s[i]] = i
        
        for i in range(1, len(s)):
            if s[i] not in stack:
                while stack and stack[-1]>s[i] and last_idx[stack[-1]] > i:
                    stack.pop()
                stack.append(s[i])
                      
        return ''.join(stack)

效果：
Runtime: 54 ms, faster than 32.86% of Python online submissions for Remove Duplicate Letters.
Memory Usage: 13.8 MB, less than 40.28% of Python online submissions for Remove Duplicate Letters.
        

或者：
（效率更高，算是剪枝）
class Solution(object):
    def removeDuplicateLetters(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []
        stack.append(s[0])
        last_idx = {}
        for i in range(len(s)):
            last_idx[s[i]] = i
        
        for i in range(1, len(s)):
            if s[i] in stack:
                continue
            while stack and stack[-1]>s[i] and last_idx[stack[-1]] > i:
                stack.pop()
            
            stack.append(s[i])
            
            
        return ''.join(stack)

效果：
Runtime: 35 ms, faster than 70.67% of Python online submissions for Remove Duplicate Letters.
Memory Usage: 13.5 MB, less than 77.39% of Python online submissions for Remove Duplicate Letters.




"""
--------------------------------------题目分割线----------------------------------------------
"""
397. Integer Replacement <medium>
输入：
int
输出：
int

找规律
什么时候除二，什么时候向下找，什么时候向上找
class Solution(object):
    def integerReplacement(self, n):
        """
        :type n: int
        :rtype: int
        """
        cnt = 0
        while n != 1:
            if n%2 == 0:
                n//=2
            elif n%4 == 1 or n == 3:
                n -= 1
            else:
                n += 1
            cnt += 1
        return cnt

效果：
Runtime: 29 ms, faster than 61.70% of Python online submissions for Integer Replacement.
Memory Usage: 13.4 MB, less than 43.62% of Python online submissions for Integer Replacement.



"""
--------------------------------------题目分割线----------------------------------------------
"""
419. Battleships in a Board <medium>
输入：
int[int[]]
输出：
int

数岛屿的数量

"""
***********************解法一分割线***********************
"""
先是DFS
class Solution(object):
    def countBattleships(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        n = len(board)
        m = len(board[0])
        
        def dfs(i,j):
            visited[i][j]=1
            dir = [[-1,0],[0,1],[1,0],[0,-1]]
            for a,b in dir:
                row = a+i
                col = b+j
                if row>=0 and row<n and col>=0 and col<m and board[row][col]=='X' and not visited[row][col]:
                    dfs(row,col)
        visited = [[0 for _ in range(m)] for i in range(n)]
        res=0
        for i in range(n):
            for j in range(m):
                if not visited[i][j] and board[i][j]=='X':
                    dfs(i, j)
                    res+=1
        return res

效果：
Runtime: 131 ms, faster than 22.64% of Python online submissions for Battleships in a Board.
Memory Usage: 17.1 MB, less than 24.15% of Python online submissions for Battleships in a Board.


另一种写法：
class Solution(object):
    def countBattleships(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        n = len(board)
        m = len(board[0])
        visited = [[0 for _ in range(m)] for i in range(n)]
        
        def dfs(i, j):
            if i<0 or j<0 or i>=n or j>=m or board[i][j]=='.' or visited[i][j]:
                return
            if board[i][j] == 'X' and not visited[i][j]:
                visited[i][j] = 1
                dfs(i-1,j)
                dfs(i+1,j)
                dfs(i,j+1)
                dfs(i,j-1)
        
        res = 0
        for i in range(n):
            for j in range(m):
                if not visited[i][j] and board[i][j]=='X':
                    dfs(i, j)
                    res+=1
        return res

效果：
Runtime: 132 ms, faster than 21.13% of Python online submissions for Battleships in a Board.
Memory Usage: 17.1 MB, less than 24.15% of Python online submissions for Battleships in a Board.


"""
***********************解法二分割线***********************
"""
BFS
class Solution(object):
    def countBattleships(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        if not board: 
            return 0
        
        rows = len(board)
        cols = len(board[0])
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        
        res = 0
        # Iterate through our board looking for ships 'X'.
        for row in range(rows):
            for col in range(cols):
			    # If we find one start searching from it's starting location.
                if board[row][col] == 'X':
                    q = collections.deque([(row, col)])
					# Fill the location to avoid revisiting it.
                    board[row][col] = '#'
                    while q:
                        r, c = q.popleft()
                        for y, x in directions:
						    # Create new row and col location to search based on our possible move directions.
                            nr = r + y
                            nc = c + x
							# Make sure there coords. are valid, ie. on our board and contain an 'X'.
                            if nr < rows and nr >= 0 and nc < cols and nc >= 0 and board[nr][nc] == 'X':
							    # If so, we'll append to the deque and mark the location.
                                q.append((nr, nc))
                                board[nr][nc] = '#'
					# When we get here we know we've found and marked to ship as being found so we count.
                    res += 1
                    
        return res

效果：
Runtime: 128 ms, faster than 25.66% of Python online submissions for Battleships in a Board.
Memory Usage: 16.6 MB, less than 97.36% of Python online submissions for Battleships in a Board.


reference：
https://leetcode.com/problems/battleships-in-a-board/discuss/755605/Simple-Python-Recursive-DFS-beats-86-and-Iterative-BFS-with-Comments!




