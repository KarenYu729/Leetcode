week 1
Sep 21

今日题外话，早上听machine learning被矩阵卡住了
人生中第不知道多少次被矩阵扼住命运的咽喉
上次这么惨还是上学期的DSP


"""
--------------------------------------题目分割线----------------------------------------------
""" 
349. Intersection of Two Arrays
输入：
int[]
int[]
输出：
int[]

"""
***********************解法二分割线***********************
""" 
昨天有用字典做
这次就按遍历来（我永远喜欢暴力）
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        res = []
        
        idx1 = 0
        
        while idx1<len(nums1):
            for i in range(len(nums2)):
                if nums1[idx1]==nums2[i] and nums1[idx1] not in res:
                    res.append(nums1[idx1])
            idx1+=1
            
        return res
        
效果：
Runtime: 417 ms, faster than 5.15% of Python online submissions for Intersection of Two Arrays.
Memory Usage: 13.6 MB, less than 60.95% of Python online submissions for Intersection of Two Arrays.

但是相比于之前用字典，更慢了orz



"""
***********************解法三分割线***********************
""" 
binary search

class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        result = []
        def binarySearch(arr , target):
            
            start = 0 
            end = len(arr) -1 
            mid = start + (end - start)//2 
            
            while start <= end :
                
                if arr[mid] == target :
                    
                    return True
                elif target > arr[mid]:
                    start = mid + 1 
                else:
                    end = mid - 1
                mid = start + (end - start)//2
            return False 
        
        if len(nums1) >= len(nums2) :
            nums1.sort()
            
            for i in range(len(nums2)):
                
                if binarySearch(nums1 , nums2[i]) :
                    result.append(nums2[i])
        elif len(nums2) > len(nums1) :
            nums2.sort()
            for i in range(len(nums1)):
                
                if binarySearch(nums2 , nums1[i]) :
                    result.append(nums1[i])
 
        return set(result)

效果：
Runtime: 78 ms, faster than 20.24% of Python online submissions for Intersection of Two Arrays.
Memory Usage: 13.8 MB, less than 13.96% of Python online submissions for Intersection of Two Arrays.

reference：
https://leetcode.com/problems/intersection-of-two-arrays/discuss/1850677/Beginner-friendly-solution-from-scratch

俺自己写的
在一个很傻的地方卡了很久->指忘了break，导致一直TLE，我还在想原来TLE的是我们组的另一个同学，我一直是那个RE的
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        res = []
        # 让nums1永远是短的那个数组，遍历nums1，设置target
        if len(nums1)>len(nums2):
            nums1, nums2 = nums2, nums1
        
        nums2.sort()
        
        for i in range(len(nums1)):
            target = nums1[i]
            if target not in res:
                left, right = 0, len(nums2)-1
                mid = (left+right)>>1
                while left<=right:
                    mid = (left+right)>>1
                    if nums2[mid]==target:
                        res.append(target)
                        break
                    elif nums2[mid]>target:
                        right=mid-1
                    else:
                        left=mid+1
        
        return res

效果：
Runtime: 72 ms, faster than 26.04% of Python online submissions for Intersection of Two Arrays.
Memory Usage: 13.6 MB, less than 60.95% of Python online submissions for Intersection of Two Arrays.
我就说这个干嘛写函数！还慢还占地方orz×




"""
--------------------------------------题目分割线----------------------------------------------
""" 
350. Intersection of Two Arrays II <easy>
输入：
int[]
int[]
输出：
int[]
类似上一题，但是要包含重复

"""
***********************解法一分割线***********************
"""
仍然是暴力解法
记一下remove的用法
这里不是放index是放要remove的具体value
class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        res=[]
        for num in nums1:
            if len(nums2) != 0 and num in nums2:
                res.append(num)
                nums2.remove(num)
        return res

效果：
Runtime: 88 ms, faster than 17.41% of Python online submissions for Intersection of Two Arrays II.
Memory Usage: 13.7 MB, less than 11.15% of Python online submissions for Intersection of Two Arrays II.

"""
***********************解法二分割线***********************
"""
仍然是暴力字典
class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        nums1Dict = {}
        nums2Dict = {}
        for i in nums1:
            if i not in nums1Dict:
                nums1Dict[i] = 1
            else:
                nums1Dict[i] += 1
        
        for i in nums2:
            if i not in nums2Dict:
                nums2Dict[i] = 1
            else:
                nums2Dict[i] += 1
        
        res = []

        for i in nums1Dict:
            if i in nums2Dict:

                cnt = min(nums1Dict[i], nums2Dict[i])
                for j in range(cnt):
                    res.append(i)
                
        return res

效果：
Runtime: 49 ms, faster than 70.96% of Python online submissions for Intersection of Two Arrays II.
Memory Usage: 13.7 MB, less than 31.00% of Python online submissions for Intersection of Two Arrays II.


补充，可以用Counter函数
class Solution(object):
    def intersect(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        res = []
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        count = Counter(nums1)
        for num in nums2:
            if num in count and count[num] > 0:
                res.append(num)
                count[num] -= 1               
        return res

效果：
Runtime: 36 ms, faster than 89.26% of Python online submissions for Intersection of Two Arrays II.
Memory Usage: 13.5 MB, less than 79.11% of Python online submissions for Intersection of Two Arrays II.




"""
--------------------------------------题目分割线----------------------------------------------
""" 
985. Sum of Even Numbers After Queries <medium>
输入：
int[]
int[int[]]
输出：
int[]

class Solution(object):
    def sumEvenAfterQueries(self, nums, queries):
        """
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: List[int]
        """
        currSum = sum([val for val in nums if not val & 1])
        a = []
        for val, i in queries:
            if not nums[i] & 1: currSum -= nums[i]
            nums[i] += val
            if not nums[i] & 1: currSum += nums[i]
            a.append(currSum)
        return a
        
效果：
Runtime: 933 ms, faster than 35.44% of Python online submissions for Sum of Even Numbers After Queries.
Memory Usage: 19.6 MB, less than 92.41% of Python online submissions for Sum of Even Numbers After Queries.

reference：
https://leetcode.com/problems/sum-of-even-numbers-after-queries/discuss/2607229/Python-or-Easy-understanding-or-Presum
        
比较新奇（对我而言）的做法
定点注释：
currSum = sum([val for val in nums if not val & 1])
val & 1
print(2&1)
print(11&1)
输出：
0
1

比较正常的写法：
class Solution(object):
    def sumEvenAfterQueries(self, nums, queries):
        """
        :type nums: List[int]
        :type queries: List[List[int]]
        :rtype: List[int]
        """
        InitRes = 0
        for num in nums:
            if num%2==0:
                InitRes+=num
        
        res=[]
        
        for i in queries:
            addVal, numIdx = i
            if nums[numIdx]%2==0:
                InitRes-=nums[numIdx]
            nums[numIdx]+=addVal
            
            if nums[numIdx]%2==0:
                InitRes+=nums[numIdx]
            
            res.append(InitRes)
        
        return res

效果：
Runtime: 848 ms, faster than 43.04% of Python online submissions for Sum of Even Numbers After Queries.
Memory Usage: 19.8 MB, less than 18.99% of Python online submissions for Sum of Even Numbers After Queries.
        
        位运算还是快
        
        
"""
--------------------------------------题目分割线----------------------------------------------
"""         
2. Add Two Numbers <medium>
输入：
ListNode
ListNode
输出：        
ListNode        
        
经典链表展开
这个写的很详细
reference：
https://leetcode.com/problems/add-two-numbers/discuss/2592931/Python-99.35-faster-or-Simplest-solution-with-explanation-or-Beg-to-Adv-or-Linked-list
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy = ListNode() # taking dummy node
        curr = dummy # making pointer to point to the dummy node.
        
        carry = 0 # taking variable to take care of carry.
        
        while l1 or l2 or carry: # Firstly we are considering we should be having 2 list & then we have to take care of 2nd edge case for that we are taking carry in it. If we didnt have to take care of carry then we could have used l1 and l2 as in merging of 2 linked lists.
            v1 = l1.val if l1 else 0 # if we have any node in list1 else will add 0 as we might have carry to take care of.
            # Could be written as :
            #     if l1:
            #         v1 = l1.val
            #     else:
            #         None
            v2 = l2.val if l2 else 0 # if we have any node in list2 else will add 0 as we might have carry to take care of.
            
            # new digit
            val = v1 + v2 + carry # calculating the sum of the values in both the list with any carry we might have.
            carry = val // 10 # for calculating carry, for instance we have 15 as val then we`ll get 1 as carry.
            val = val % 10 # for having the first digit(reminder), for instance we have 15 as val then we`ll get 5 as value(reminder).
            curr.next = ListNode(val) # updating the reference to the next node of val. 
            
            # update pointers
            curr = curr.next # updating pointer to point to the new node(value)
            l1 = l1.next if l1 else None # updating pointer of list1 to have next value of list1.
            l2 = l2.next if l2 else None # updating pointer of list2 to have next value of list2.
            
        return dummy.next # returing dummy next bcz actuall linked list is after dummy node only, that why we dont consider dummy node while returing the linked list.         
        
效果：
Runtime: 114 ms, faster than 23.37% of Python online submissions for Add Two Numbers.
Memory Usage: 13.6 MB, less than 17.00% of Python online submissions for Add Two Numbers.
        
步骤：
1.新建一个链表
 dummy = ListNode()       
2.复制一波刚刚新建的链表        
 curr = dummy      
 （实际，指向首位）       
3.让行的链表指向一个新的节点
curr.next = ListNode(val)        
4.结束操作
5.返回
return dummy.next
第一位是空格
        
        
        
        
        
