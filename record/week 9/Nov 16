week 9
Nov 16



"""
--------------------------------------题目分割线----------------------------------------------
"""
417. Pacific Atlantic Water Flow <medium>
输入：
int[int[]]
输出：
int[int[]]

"""
***********************解法一分割线***********************
"""
BFS
每个海都向中心扩展，最后在两个海能到达的位置里找交集
class Solution(object):
    def pacificAtlantic(self, heights):
        """
        :type heights: List[List[int]]
        :rtype: List[List[int]]
        """
        if not heights: 
            return []
        dirs = [(1,0), (-1,0), (0,1), (0,-1)]
        m, n = len(heights), len(heights[0])
        pacific = [(0, i) for i in range(n)] + [(i, 0) for i in range(1, m)]
        atlantic = [(m-1, i) for i in range(n)] + [(i, n-1) for i in range(m-1)]
        
        def bfs(q):
            visited = set()
            q = collections.deque(q)
            
            while q:
                i, j = q.popleft()
                visited.add((i, j))
                for di, dj in dirs:
                    newI, newJ = i+di, j+dj
                    if 0<=newI<m and 0<=newJ<n and (newI, newJ) not in visited and heights[newI][newJ]>=heights[i][j]:
                        q.append((newI, newJ))
                        
            return visited
        return bfs(pacific) & bfs(atlantic)     

效果：
Runtime: 998 ms, faster than 15.56% of Python online submissions for Pacific Atlantic Water Flow.
Memory Usage: 15.2 MB, less than 69.88% of Python online submissions for Pacific Atlantic Water Flow.

"""
***********************解法二分割线***********************
"""
DFS
class Solution(object):
    def pacificAtlantic(self, heights):
        """
        :type heights: List[List[int]]
        :rtype: List[List[int]]
        """
        if not heights: 
            return []
        dirs = [(1,0), (-1,0), (0,1), (0,-1)]
        m, n = len(heights), len(heights[0])
        
        def dfs(i, j, visited):
            visited.add((i, j))
            for di, dj in dirs:
                newI, newJ = i+di, j+dj
                if 0<=newI<m and 0<=newJ<n and (newI, newJ) not in visited and heights[newI][newJ]>=heights[i][j]:
                    dfs(newI, newJ, visited)
        
        pas_visited = set()
        alt_visited = set()
        
        for i in range(m):
            dfs(i, 0, pas_visited)
            dfs(i, n-1, alt_visited)
        for j in range(n):
            dfs(0, j, pas_visited)
            dfs(m-1, j, alt_visited)
                        
        return pas_visited & alt_visited
        
效果：
https://leetcode.com/problems/pacific-atlantic-water-flow/discuss/2508533/Python-Elegant-and-Short-or-DFS-or-99.21-faster


"""
--------------------------------------题目分割线----------------------------------------------
"""
538. Convert BST to Greater Tree <medium>
输入：
TreeNode
输出：
TreeNode

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def convertBST(self, root):
        """
        :type root: TreeNode
        :rtype: TreeNode
        """
        def dfs(node):
            
            if node:
                
                dfs(node.right)
                
                node.val += dfs.greater_sum
                dfs.greater_sum = node.val
                
                dfs(node.left)
        
        # ----------------------------------
        dfs.greater_sum = 0
        dfs(root)
        
        return root        

效果：
Runtime: 57 ms, faster than 98.68% of Python online submissions for Convert BST to Greater Tree.
Memory Usage: 17.8 MB, less than 54.97% of Python online submissions for Convert BST to Greater Tree.

inference:
https://leetcode.com/problems/convert-bst-to-greater-tree/discuss/513712/Python-O(n)-by-DFS-approach.-80%2B-With-explanation



"""
--------------------------------------题目分割线----------------------------------------------
"""
99. Recover Binary Search Tree <medium>
输入：
TreeNode
输出：


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        stack = [] 
        lower = TreeNode(float('-inf'))
        nodes = []
        
        while stack or root:
            while root:
                stack.append(root)
                root = root.left
            
            top = stack.pop()
            
            if top.val < lower.val:
                nodes += [lower, top]
            lower = top
            
            if top.right:
                root = top.right
                
        if len(nodes) == 2:
            nodes[0].val, nodes[1].val = nodes[1].val, nodes[0].val
        elif len(nodes) == 4:
            nodes[0].val, nodes[3].val = nodes[3].val, nodes[0].val     

效果：
Runtime: 97 ms, faster than 75.28% of Python online submissions for Recover Binary Search Tree.
Memory Usage: 13.9 MB, less than 36.11% of Python online submissions for Recover Binary Search Tree.




"""
--------------------------------------题目分割线----------------------------------------------
"""
513. Find Bottom Left Tree Value <medium>
输入：
TreeNode
输出：
int

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def findBottomLeftValue(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        q = collections.deque()
        q.append(root)
        
        left = root.val
        while q:
            size = len(q)
            res = []
            while size:
                node = q.popleft()
                res.append(node.val)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                size-=1
            left = res[0]
        return left        

效果：
Runtime: 63 ms, faster than 51.98% of Python online submissions for Find Bottom Left Tree Value.
Memory Usage: 17.9 MB, less than 74.26% of Python online submissions for Find Bottom Left Tree Value.



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：


"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：
