week 9
Nov 13




"""
--------------------------------------题目分割线----------------------------------------------
"""
91. Decode Ways <medium>
输入：
str
输出：
int

class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if s[0] == '0':
            return 0
        n = len(s)
        # dp[i]: number of ways of decoding the substring s[:i]
        dp = [0 for _ in range(n + 1)]
        # base case
        dp[0] = 1
        for i in range(1, n + 1):
            # check single digit decode
            # valid deocde is possible only when s[i - 1] is not zero
            # if so, take the previous state dp[i - 1]
            # e.g. AB - 1[2]
            if s[i - 1] != '0':
                dp[i] = dp[i - 1]
            # check double digit decode
            # by looking at the previous two digits
            # if the substring belongs to the range [10 - 26]
            # then add the previous state dp[i - 2]
            # e.g. L - [12]
            if i >= 2:
                # or you can use `stoi(s.substr(i - 2, 2))`
                x = int(s[i - 2: i])
                # check the range
                if 10 <= x <= 26:
                    dp[i] += dp[i - 2]
        return dp[n]
        

效果：
Runtime: 51 ms, faster than 8.72% of Python online submissions for Decode Ways.
Memory Usage: 13.7 MB, less than 32.56% of Python online submissions for Decode Ways.

inference:
https://leetcode.com/problems/decode-ways/discuss/2795116/Python-Solution-Explained-(Intuition-and-Algorithm)
https://leetcode.com/problems/decode-ways/discuss/2644238/LeetCode-The-Hard-Way-Explained-Line-By-Line


"""
--------------------------------------题目分割线----------------------------------------------
"""
303. Range Sum Query - Immutable <easy>
输入：

输出：


class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.n = nums

    def sumRange(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: int
        """
        return sum(self.n[left: right+1])


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(left,right)
        

效果：
Runtime: 1588 ms, faster than 18.02% of Python online submissions for Range Sum Query - Immutable.
Memory Usage: 17.1 MB, less than 66.14% of Python online submissions for Range Sum Query - Immutable.



"""
--------------------------------------题目分割线----------------------------------------------
"""
140. Word Break II <hard>
输入：
str
str[]
输出：
str[]

class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
        res = []
        
        def backtracking(start_idx, List):
            if start_idx == len(s):
                res.append(' '.join(List))
                return
            
            for i in range(start_idx, len(s)+1):
                if s[start_idx:i] in wordDict:
                    backtracking(i, List+[s[start_idx:i]])
        
        backtracking(0, [])
        return res
        

效果：
Runtime: 23 ms, faster than 76.06% of Python online submissions for Word Break II.
Memory Usage: 13.5 MB, less than 38.26% of Python online submissions for Word Break II.

reference:
https://leetcode.com/problems/word-break-ii/discuss/2588753/Simple-Backtracking-Solution-with-Path-Taken


"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：





        

        
      


        

        
