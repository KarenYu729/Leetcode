week 9
Nov 15

昨天忘记存了，然后还忘记昨天做了什么题了，干脆就不记录昨天的内容了。



"""
--------------------------------------题目分割线----------------------------------------------
"""
931. Minimum Falling Path Sum <medium>
输入：
int[int[]]
输出：
int

class Solution(object):
    def minFallingPathSum(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        grid = matrix
        for i in range(1, len(grid)):
            for j in range(len(grid[i])):

                # [1] up-left
                if i-1 >= 0 and j-1 >= 0:
                    p1 = grid[i-1][j-1]
                else:
                    p1 = float('inf')

                # [2] up-same
                if i-1 >= 0:
                    p2 = grid[i-1][j]
                else:
                    p2 = float('inf')

                # [3] up-right
                if i-1 >= 0 and j+1 <= len(grid[0])-1:
                    p3 = grid[i-1][j+1]
                else:
                    p3 = float('inf')

                grid[i][j] += min(p1,p2,p3)

        return min(grid[len(grid)-1])     

效果：
Runtime: 271 ms, faster than 33.04% of Python online submissions for Minimum Falling Path Sum.
Memory Usage: 14.5 MB, less than 20.98% of Python online submissions for Minimum Falling Path Sum.

reference:
https://leetcode.com/problems/minimum-falling-path-sum/discuss/1369046/Python-Explanation-%2B-Visuals-or-5-approaches-(DP-DFS-w-memo-DFS-iterative)


"""
--------------------------------------题目分割线----------------------------------------------
"""
304. Range Sum Query 2D - Immutable <medium>
输入：
int
int
int
int
输出：
int

class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        self.dp=[[0] * (len(matrix[0])+1) for _ in range(len(matrix)+1)]
        
        # calculate prefix sum
        for r in range(len(self.dp)-1):
            for c in range(len(self.dp[0])-1):
                self.dp[r+1][c+1]=matrix[r][c] + self.dp[r][c+1] + self.dp[r+1][c] - self.dp[r][c]
        

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        return self.dp[row2+1][col2+1] - self.dp[row1][col2+1] - self.dp[row2+1][col1] + self.dp[row1][col1]


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)        

效果：
Runtime: 2198 ms, faster than 75.20% of Python online submissions for Range Sum Query 2D - Immutable.
Memory Usage: 24.5 MB, less than 30.40% of Python online submissions for Range Sum Query 2D - Immutable.



"""
--------------------------------------题目分割线----------------------------------------------
"""
115. Distinct Subsequences <hard>
输入：
str
str
输出：
int

class Solution(object):
    def numDistinct(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: int
        """
        dp = [[0] * (len(s) + 1) for _ in range(len(t) + 1)]
        # print(dp)
        for col in range(len(dp[0])):
            dp[0][col] = 1
        # print(dp)
        for x in range(1, len(s) + 1):
            for y in range(1, len(t) + 1):
                if s[x - 1] == t[y - 1]:
                    dp[y][x] = dp[y - 1][x - 1] + dp[y][x - 1]
                else:
                    dp[y][x] = dp[y][x - 1]
        # print(dp)
        return dp[-1][-1]     

效果：
Runtime: 1367 ms, faster than 36.67% of Python online submissions for Distinct Subsequences.
Memory Usage: 70.1 MB, less than 56.19% of Python online submissions for Distinct Subsequences.

reference:
https://leetcode.com/problems/distinct-subsequences/discuss/2610720/Python-Iterative-Bottom-Up-Solution-or-O(mn)-Time-or-O(mn)-Space
https://leetcode.com/problems/distinct-subsequences/discuss/572192/Understand-DP-through-question-115-explanation-with-pictures


"""
--------------------------------------题目分割线----------------------------------------------
"""
877. Stone Game <medium>
输入：
int[]
输出：
bool

先手游戏，先手必胜
class Solution(object):
    def stoneGame(self, piles):
        """
        :type piles: List[int]
        :rtype: bool
        """
        return True
        
效果：
Runtime: 27 ms, faster than 85.88% of Python online submissions for Stone Game.
Memory Usage: 13.3 MB, less than 78.24% of Python online submissions for Stone Game.



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


     

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：


        

效果：
