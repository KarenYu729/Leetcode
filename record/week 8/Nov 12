week 8
Nov 12



"""
--------------------------------------题目分割线----------------------------------------------
"""
655. Print Binary Tree <medium>
输入：
TreeNode
输出：
list[str[]]

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def printTree(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[str]]
        """
        height = self.getHeight(root)
        width = 2**height-1
        
        self.result = [["" for i in range(width)] for j in range(height)]
        
        self.dfs(root,0,0,width-1)
        return self.result
         
    def dfs(self,root,level,left,right):
        if root is None:
            return
        
        mid = left+(right-left)//2
        self.result[level][mid] = str(root.val)
        self.dfs(root.left,level+1,left,mid-1)
        self.dfs(root.right,level+1,mid+1,right)
        
    
    def getHeight(self,root):
        if root is None:
            return 0
        left = self.getHeight(root.left)
        right = self.getHeight(root.right)
        return max(left,right)+1
        

效果：
Runtime: 28 ms, faster than 70.97% of Python online submissions for Print Binary Tree.
Memory Usage: 13.5 MB, less than 45.16% of Python online submissions for Print Binary Tree.

reference:
https://leetcode.com/problems/print-binary-tree/discuss/2024918/Python-Solution-(preorder-Traverse-and-binnnay-search-for-finding-the-position)



"""
--------------------------------------题目分割线----------------------------------------------
"""
139. Word Break
输入：
str
str[]
输出：
bool

"""
***********************解法一分割线***********************
"""
Top-down : Iterative BFS - generate all substrings intially but only traverse the dict-approved ones
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        q = collections.deque()
        q.append(0) # startIndx
        visited = set()
        dictSet = set(wordDict)
        while q:
            startIndx = q.popleft()
            if startIndx == len(s): # - NOTE [1]
                return True
                
            if startIndx not in visited:
                visited.add(startIndx)
                    
                for endIndx in range(startIndx+1, len(s)+1): # NOTE [2]
                    sub = s[startIndx: endIndx]
                    if sub in dictSet:
                        q.append(endIndx) # endIndx is the new startIndx
                            
        return False          

效果：
Runtime: 28 ms, faster than 87.79% of Python online submissions for Word Break.
Memory Usage: 13.6 MB, less than 71.20% of Python online submissions for Word Break.

reference：
https://leetcode.com/problems/word-break/discuss/428606/Python-Simple-Iterative-BFS-or-DFS-24ms
https://leetcode.com/problems/word-break/discuss/428606/Python-Simple-Iterative-BFS-or-DFS-24ms

"""
***********************解法二分割线***********************
"""
DP 
class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        dp = [False] * (len(s) + 1) # dp[i] means s[:i+1] can be segmented into words in the wordDicts 
        dp[0] = True
        for i in range(len(s)):
            for j in range(i, len(s)):
                if dp[i] and s[i: j+1] in wordDict:
                    dp[j+1] = True
                    
        return dp[-1]

效果：
Runtime: 81 ms, faster than 11.40% of Python online submissions for Word Break.
Memory Usage: 13.4 MB, less than 89.06% of Python online submissions for Word Break.

reference：
https://leetcode.com/problems/word-break/discuss/43995/A-Simple-Python-DP-solution



"""
--------------------------------------题目分割线----------------------------------------------
"""
746. Min Cost Climbing Stairs <easy>
输入：
int[]
输出：
int

class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        if not cost:
            return 0
        
        dp = [0]*len(cost)
        dp[0] = cost[0]
        
        if len(cost)>=2:
            dp[1] = cost[1]
        
        for i in range(2, len(cost)):
            dp[i] = cost[i]+min(dp[i-1], dp[i-2])
        
        return min(dp[-1], dp[-2])
            
        
效果：
Runtime: 54 ms, faster than 76.41% of Python online submissions for Min Cost Climbing Stairs.
Memory Usage: 13.5 MB, less than 77.84% of Python online submissions for Min Cost Climbing Stairs.

reference:
https://leetcode.com/problems/min-cost-climbing-stairs/discuss/657490/Python-solution-from-a-beginner-(some-easy-steps-to-follow-to-solve-dp)


