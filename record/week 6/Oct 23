week 6
Oct 23





"""
--------------------------------------题目分割线----------------------------------------------
"""
76. Minimum Window Substring <hard>
输入：
str
str
输出：
str

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        charFreq = {} # Keep track of the count of every character in the pattern we are trying to match
        for char in t:
            if char not in charFreq:
                charFreq[char] = 1
            else:
                charFreq[char] += 1
        
        matched = 0 # Keep track of all the characters we have fully matched
        minStart = 0 # Keep track of the start of the smallest substring/window
        minLength = float('inf') # Keep track of the minimum window/substring length
        windowStart = 0
        
        for windowEnd in range(len(s)):
            char = s[windowEnd] # Current character
            
            if char in charFreq:
                charFreq[char] -= 1
                
                if charFreq[char] == 0:
                    matched += 1
            
            while matched == len(charFreq):
                windowSize = windowEnd - windowStart + 1 # Current window size
                if windowSize < minLength:
                    minLength = windowSize
                    minStart = windowStart
                
                remove = s[windowStart] # The character we are going to remove from the window
                
                if remove in charFreq:
                    # If we are removing the last instance of this character from our window
                    if charFreq[remove] == 0:
                        matched -= 1 # Decrement matched since we have 1 less matched character now
                    charFreq[remove] += 1 # Add that character back into the charFreq hashmap
                windowStart += 1 # Increment windowStart to shrink the window
        
        if minLength == float('inf'):
            return ""
        return s[minStart: minStart + minLength]
        

效果：
Runtime: 60 ms, faster than 99.32% of Python online submissions for Minimum Window Substring.
Memory Usage: 16.5 MB, less than 41.56% of Python online submissions for Minimum Window Substring.

reference:
https://leetcode.com/problems/minimum-window-substring/discuss/1784588/Python-Simple-sliding-window-solution-(O(S-%2B-T)-O(S))-(beats-99-and-94)


"""
--------------------------------------题目分割线----------------------------------------------
"""
387. First Unique Character in a String <easy>
输入：
str
输出：
int

class Solution(object):
    def firstUniqChar(self, s):
        """
        :type s: str
        :rtype: int
        """
        charFreq = Counter(s)
        
        for i in range(len(s)):
            if charFreq[s[i]] == 1:
                return i
        return -1
        

效果：
Runtime: 378 ms, faster than 39.52% of Python online submissions for First Unique Character in a String.
Memory Usage: 14.2 MB, less than 48.95% of Python online submissions for First Unique Character in a String.



"""
--------------------------------------题目分割线----------------------------------------------
"""
128. Longest Consecutive Sequence <medium>
输入：

输出：


class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        numSet = set(nums)
        
        maxLen = 0
        for i in nums:
            if i-1 not in numSet:
                # then i is the start of this subset
                setLen = 1
                while i+1 in numSet:
                    setLen += 1
                    i+=1
                maxLen = max(maxLen, setLen)
        return maxLen
        

效果：
Runtime: 5377 ms, faster than 5.57% of Python online submissions for Longest Consecutive Sequence.
Memory Usage: 30.5 MB, less than 79.86% of Python online submissions for Longest Consecutive Sequence.

这里要注意两个点
1. maxLen = 0
这里如果初始化成负无穷，那么遇到空数组，就会出现返回负无穷，但是显然，我们最少得是0（大概最后加一个判断也行）
2. maxLen = max(maxLen, setLen)
注意一下位置，毕竟setLen的初始化是在if条件里的

如下：
class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        numSet = set(nums)
        
        maxLen = float('-inf')
        for i in nums:
            if i-1 not in numSet:
                # then i is the start of this subset
                setLen = 1
                while i+1 in numSet:
                    setLen += 1
                    i+=1
                maxLen = max(maxLen, setLen)
        
        return 0 if maxLen<0 else maxLen

但是会稍微慢点儿


"""
--------------------------------------题目分割线----------------------------------------------
"""
102. Binary Tree Level Order Traversal <medium>
输入：
TreeNode
输出：
int[int[]]

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        res = []
        if root is None:
            return res
        
        q = collections.deque([root])
        
        while q:
            size = len(q)
            level = []
            while size>0:
                node = q.popleft()
                level.append(node.val)
                
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                
                size-=1
                
            res.append(level)
        
        return res
        

效果：
Runtime: 49 ms, faster than 16.07% of Python online submissions for Binary Tree Level Order Traversal.
Memory Usage: 13.8 MB, less than 64.73% of Python online submissions for Binary Tree Level Order Traversal.




"""
--------------------------------------题目分割线----------------------------------------------
"""
104. Maximum Depth of Binary Tree <easy>
输入：
TreeNode
输出：
int

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        Depth = 0
        if root is None:
            return Depth
        
        q = collections.deque([root])
        
        while q:
            size = len(q)
            
            while size>0:
                node = q.popleft()
                
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                
                size -= 1
            
            Depth += 1
        
        return Depth
        

效果：
Runtime: 52 ms, faster than 48.90% of Python online submissions for Maximum Depth of Binary Tree.
Memory Usage: 16 MB, less than 72.77% of Python online submissions for Maximum Depth of Binary Tree.




"""
--------------------------------------题目分割线----------------------------------------------
"""
199. Binary Tree Right Side View <medium>
输入：
TreeNode
输出：
int[]

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        if root is None:
            return res
        
        q = collections.deque([root])
        
        while q:
            size = len(q)
            sideView = 0
            
            while size>0:
                node = q.popleft()
                if size==1:
                    sideView = node.val
                
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                
                size-=1
            
            res.append(sideView)
        
        return res
        
        
        

效果：
Runtime: 35 ms, faster than 44.64% of Python online submissions for Binary Tree Right Side View.
Memory Usage: 13.6 MB, less than 26.24% of Python online submissions for Binary Tree Right Side View.





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：






"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：






"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：






"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：






"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：






"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：










