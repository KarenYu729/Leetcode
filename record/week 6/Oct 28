week 6
Oct 28




"""
--------------------------------------题目分割线----------------------------------------------
"""
343. Integer Break <medium>
输入：
int
输出：
int

class Solution(object):
    def integerBreak(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [0] * (n + 1)
        dp[1] = 1
        for i in range(2, n + 1):
            for j in range(1, i):
                dp[i] = max(dp[i], max(j * dp[i - j], j * (i - j)))
        return dp[n]
        

效果：
Runtime: 23 ms, faster than 84.96% of Python online submissions for Integer Break.
Memory Usage: 13.7 MB, less than 5.94% of Python online submissions for Integer Break.

reference：
https://leetcode.com/problems/integer-break/discuss/2404837/Python-Easy-Solution-(faster-than-87)




"""
--------------------------------------题目分割线----------------------------------------------
"""
127. Word Ladder <hard>
输入：
str
str
str[]
输出：
int

class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        #Check if endWord exists in wordList
        if endWord not in wordList:
            return 0
        
        #Initialize queue and res
        q = collections.deque()
        q.append(beginWord)
        res = 0
        #Cuz TC for removal of elem from list is O(n) while for set, it is O(1)
        wordList = set(wordList)
        
        #BFS
        while q:
            #Result incremented for every level
            res += 1
            qsize = len(q)
            #Iterate over all elems in current level
            for k in range(qsize):
                word = q.popleft()
                #If word is result
                if word == endWord:
                    return res
                #If word is not result, then iterate over its length and find its neighbours
                for i in range(len(word)):
                    start = ord('a')
                    for j in range(26):
                        temp = word[:i] + chr(start+j) + word[i+1:]
                        #If neighbour is valid
                        if (temp in wordList):
                            q.append(temp)
                            wordList.remove(temp)
        return 0
        

效果：
Runtime: 1189 ms, faster than 19.26% of Python online submissions for Word Ladder.
Memory Usage: 14.5 MB, less than 82.73% of Python online submissions for Word Ladder.

reference:
https://leetcode.com/problems/word-ladder/discuss/2435121/Simple-Python-BFS-SC-94

函数说明：
start = ord('a')
ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值






"""
--------------------------------------题目分割线----------------------------------------------
"""
934. Shortest Bridge <medium>
输入：
int[int[]]
输出：
int

"""
***********************解法一分割线***********************
"""
class Solution(object):
    def shortestBridge(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        def paint(grid,i,j):
            if not 0<=i<len(grid) or not 0<=j<len(grid[0]):
                return 
            if grid[i][j]==1:
                grid[i][j] = 2
                paint(grid,i-1,j)
                paint(grid,i+1,j)
                paint(grid,i,j-1)
                paint(grid,i,j+1)
                
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1:
                    paint(grid,i,j)
                    break 
            else:
                continue 
            break 
        
        # print(grid)
        def expand(grid,i,j,n):
            if not 0<=i<len(grid) or not 0<=j<len(grid[0]):
                return   
            if grid[i][j]==0:
                grid[i][j] = n+1
            return grid[i][j]==1
        
        n = 2
        while True:
            for i in range(len(grid)):
                for j in range(len(grid[0])):
                    if grid[i][j]==n and (expand(grid,i-1,j,n) or expand(grid,i+1,j,n) or expand(grid,i,j+1,n) or expand(grid,i,j-1,n)):
                        return n-2
            n += 1
        

效果：
Runtime: 1218 ms, faster than 14.65% of Python online submissions for Shortest Bridge.
Memory Usage: 15 MB, less than 83.25% of Python online submissions for Shortest Bridge.

reference：
https://leetcode.com/problems/shortest-bridge/discuss/1251709/BFS-python-with-explanation-amazing-solution


"""
***********************解法二分割线***********************
"""
class Solution(object):
    def shortestBridge(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        numR = len(grid)
        numC = len(grid[0])
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        visited = [[False] * numC for _ in range(numR)]
        searchQueue = deque()
        
        def updateIsland(r, c):
            queue = deque()
            queue.append((r, c))
            visited[r][c] = True
            
            while queue:
                cr, cc = queue.popleft()
                for dr, dc in directions:
                    nr = cr + dr
                    nc = cc + dc
                    if 0 <= nr < numR and 0 <= nc < numC and not visited[nr][nc]:
                        visited[nr][nc] = True
                        if grid[nr][nc] == 1:
                            queue.append((nr, nc))
                        elif grid[nr][nc] == 0:
                            searchQueue.append((nr, nc, 1))
                    
        updated = False       
        for r in range(numR):
            for c in range(numC):
                if grid[r][c] == 1:
                    updateIsland(r, c)
                    updated = True
                    break
            if updated:
                break
        
        while searchQueue:
            r, c, flips = searchQueue.popleft()
            for dr, dc in directions:
                nr = r + dr
                nc = c + dc
                if 0 <= nr < numR and 0 <= nc < numC and not visited[nr][nc]:
                    if grid[nr][nc] == 1:
                        return flips
                    else:
                        searchQueue.append((nr, nc, flips + 1))
                        visited[nr][nc] = True


效果：
Runtime: 850 ms, faster than 49.74% of Python online submissions for Shortest Bridge.
Memory Usage: 13.6 MB, less than 100.00% of Python online submissions for Shortest Bridge.

reference：
https://leetcode.com/problems/shortest-bridge/discuss/1529456/Python-segmented-BFS-no-painting-expanding-needed



"""
--------------------------------------题目分割线----------------------------------------------
"""
310. Minimum Height Trees <medium>
输入：
int
int[int[]]
输出：
int[]

class Solution(object):
    def findMinHeightTrees(self, n, edges):
        """
        :type n: int
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        if n<=1:
            return [0]
        
        graph = collections.defaultdict(list)
        degree = [0]*n
        
        for node1, node2 in edges:
            graph[node1].append(node2)
            graph[node2].append(node1)
            degree[node1]+=1
            degree[node2]+=1
        
        q = collections.deque()
        for i in range(n):
            if degree[i] == 1:
                q.append(i)
        
        while q:
            size = len(q)
            res = []
            while size>0:
                node = q.popleft()
                res.append(node)
                for nextNode in graph[node]:
                    degree[nextNode]-=1
                    if degree[nextNode] == 1:
                        q.append(nextNode)
                size-=1        
        return res
                
效果：
Runtime: 417 ms, faster than 97.85% of Python online submissions for Minimum Height Trees.
Memory Usage: 24.4 MB, less than 66.87% of Python online submissions for Minimum Height Trees.

并非完全按照reference做的

这里用到了度的概念

最边缘的叶子节点的度一定是1，那么肯定不能把这些点作为root。
每次摘掉一层的叶子，这些节点被摘掉之后，与其相连的其他节点的度自然而然的减小了1，再将此时的叶子摘出来作为新一轮的迫害对象，直到来到root的位置
reference:
https://leetcode.com/problems/minimum-height-trees/discuss/338804/Python-BFS



"""
--------------------------------------题目分割线----------------------------------------------
"""
1091. Shortest Path in Binary Matrix <medium>
输入：
int[int[]]
输出：
int

class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m, n = len(grid), len(grid[0])
        if m==1 and n==1:
            return 1 if grid[0][0]==0 else -1
        
        if grid[0][0]==1 or grid[m-1][n-1]==1:
            return -1
        
        dirs = [[0,1],[0,-1],[1,0],[-1,0],[-1,-1],[-1,1],[1,-1],[1,1]]
        
        q=collections.deque([(0,0,1)])
        
        while q:
            i, j, pathLength = q.popleft()
            for x, y in dirs:
                nexti, nextj = i+x, j+y
                if nexti==m-1 and nextj==n-1:
                    return pathLength+1
                if not (0<=nexti<m and 0<=nextj<n) or grid[nexti][nextj]==1:
                    continue
                
                grid[nexti][nextj]=1
                q.append([nexti, nextj,pathLength+1])
                
        return -1
        

效果：
Runtime: 1283 ms, faster than 52.26% of Python online submissions for Shortest Path in Binary Matrix.
Memory Usage: 13.8 MB, less than 80.74% of Python online submissions for Shortest Path in Binary Matrix.

reference:
https://leetcode.com/problems/shortest-path-in-binary-matrix/discuss/2111074/python-3-oror-simple-bfs



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：






