week 6
Oct 26



"""
--------------------------------------题目分割线----------------------------------------------
"""
110. Balanced Binary Tree <easy>
输入：
TreeNode
输出：
bool

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        def dfs(node):
            if node is None:
                return 0
            
            leftDepth = dfs(node.left)
            rightDepth = dfs(node.right)
            
            if leftDepth == -1 or rightDepth == -1 or abs(leftDepth - rightDepth) > 1:
                return -1
            
            return max(leftDepth,rightDepth)+1
        
        return dfs(root)!=-1
        

效果：
Runtime: 63 ms, faster than 68.62% of Python online submissions for Balanced Binary Tree.
Memory Usage: 18.7 MB, less than 12.93% of Python online submissions for Balanced Binary Tree.




"""
--------------------------------------题目分割线----------------------------------------------
"""
236. Lowest Common Ancestor of a Binary Tree <medium>
输入：
TreeNode
TreeNode
TreeNode
输出：
TreeNode

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        
        if (root == p or root == q or not root): 
            #found what we want or there is nothing
            return root  
            
        left, right = self.lowestCommonAncestor(root.left, p, q), self.lowestCommonAncestor(root.right, p, q)
        
        #common ancestor
        if left and right:  
            return root
        elif left:
            return left
        elif right:
            return right
        
        return None
        
        

效果：
Runtime: 133 ms, faster than 39.34% of Python online submissions for Lowest Common Ancestor of a Binary Tree.
Memory Usage: 26 MB, less than 39.58% of Python online submissions for Lowest Common Ancestor of a Binary Tree.

reference：
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/discuss/2334341/Python-DFS-clear-and-simple-code-or-easy-to-understand



"""
--------------------------------------题目分割线----------------------------------------------
"""
450. Delete Node in a BST <medium>
输入：
TreeNode
int
输出：
TreeNode

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def deleteNode(self, root, key):
        """
        :type root: TreeNode
        :type key: int
        :rtype: TreeNode
        """
        if not root:
            return None
            
        if root.val > key:
		    # Target node is smaller than currnet node, search left subtree
			
            root.left = self.deleteNode( root.left, key )

        elif root.val < key:
		    # Target node is larger than currnet node, search right subtree
			
            root.right = self.deleteNode( root.right, key )

        else:
            # Current node is target node
			
            if (not root.left) or (not root.right):
                # At least one child is empty
                # Target node is replaced by either non-empty child or None
                root = root.left if root.left else root.right

            else:
                # Both two childs exist
                # Target node is replaced by smallest element of right subtree
                cur = root.right

                while cur.left:
                    cur = cur.left

                root.val = cur.val
                root.right = self.deleteNode( root.right, cur.val )
                    
        return root
        

效果：
Runtime: 50 ms, faster than 99.08% of Python online submissions for Delete Node in a BST.
Memory Usage: 21.5 MB, less than 21.23% of Python online submissions for Delete Node in a BST.

reference:
https://leetcode.com/problems/delete-node-in-a-bst/discuss/543124/Python-O(-h-)-with-BST-property.-85%2B-w-Comment



"""
--------------------------------------题目分割线----------------------------------------------
"""
508. Most Frequent Subtree Sum <medium>
输入：
TreeNode
输出：
int[]

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def findFrequentTreeSum(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        self.sums = collections.defaultdict(int)
        self.dfs(root)
        res = []
        max_freq = max(self.sums.values())
        for stree_sum in self.sums:
            if self.sums[stree_sum] == max_freq:
                res.append(stree_sum)
        return res
        
    def dfs(self, node):
        if node:
            left = self.dfs(node.left)
            right = self.dfs(node.right)
            self.sums[right + left + node.val] += 1
            return right + left + node.val
        return 0
        

效果：
Runtime: 61 ms, faster than 64.15% of Python online submissions for Most Frequent Subtree Sum.
Memory Usage: 18.7 MB, less than 97.17% of Python online submissions for Most Frequent Subtree Sum.

reference:
https://leetcode.com/problems/most-frequent-subtree-sum/discuss/306162/Simple-Python-DFS-O(n)-Solution-with-Explanation

https://leetcode.com/problems/most-frequent-subtree-sum/discuss/1011041/Python-DFS-%2B-memo-easy-to-understand



