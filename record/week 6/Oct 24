week 6
Oct 24





"""
--------------------------------------题目分割线----------------------------------------------
"""
515. Find Largest Value in Each Tree Row <Medium>
输入：
TreeNode
输出：
int[]

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def largestValues(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        if root is None:
            return res
        
        q = collections.deque([root])
        
        while q:
            size = len(q)
            level = []
            
            while size>0:
                node = q.popleft()
                level.append(node.val)
                
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
                size-=1
            
            res.append(max(level))
        return res
        

效果：
Runtime: 64 ms, faster than 48.12% of Python online submissions for Find Largest Value in Each Tree Row.
Memory Usage: 18.1 MB, less than 54.51% of Python online submissions for Find Largest Value in Each Tree Row.





"""
--------------------------------------题目分割线----------------------------------------------
"""
429. N-ary Tree Level Order Traversal <medium>
输入：
Node
输出：
int[int[]]

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        res = []
        if root is None:
            return res
        
        q = collections.deque([root])
        
        while q:
            size = len(q)
            res.append([])
            for i in range(size):
                NodeList = q.popleft()
                if NodeList is not None:
                    res[-1].append(NodeList.val)
                
                for child in NodeList.children:
                    q.append(child)
                
        return res    
                        

效果：
Runtime: 41 ms, faster than 92.60% of Python online submissions for N-ary Tree Level Order Traversal.
Memory Usage: 16.6 MB, less than 23.03% of Python online submissions for N-ary Tree Level Order Traversal.





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：





"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：


