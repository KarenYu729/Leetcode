week 7
Nov 3





"""
--------------------------------------题目分割线----------------------------------------------
"""
1054. Distant Barcodes <medium>
输入：
int[]
输出：
int[]

class Solution(object):
    def rearrangeBarcodes(self, barcodes):
        """
        :type barcodes: List[int]
        :rtype: List[int]
        """
        maxHeap = []
        res = []
        prev = None
        
        # Use Counter() to build a maxHeap with priority key as the count of the char
        count = collections.Counter(barcodes)
        for char, count in count.items():
            heappush(maxHeap, (count * -1, char))
            
        while maxHeap:
            count, char = heappop(maxHeap)
            count +=1 # Since it's a maxHeap we increment count to 'count down'
            res.append(char)
            
            # Push the element from previous iteration to heap 
            # since we can reuse the char after appending a different char to res
            if prev:
                heappush(maxHeap, prev)
                
            # Set prev to current element since we can't reuse it just yet
            # or not if count for the char is 0
            if count == 0:
                prev = None
            else:
                prev = (count, char)
        
        return res
        

效果：
Runtime: 1256 ms, faster than 21.43% of Python online submissions for Distant Barcodes.
Memory Usage: 16.8 MB, less than 39.29% of Python online submissions for Distant Barcodes.



"""
--------------------------------------题目分割线----------------------------------------------
"""
659. Split Array into Consecutive Subsequences <medium>
输入：
int[]
输出：
bool

"""
***********************解法一分割线***********************
"""
class Solution(object):
    def isPossible(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums) < 3: 
            return False
        
        frequency = collections.Counter(nums)
        subsequence = collections.defaultdict(int)
        
        for i in nums:
            if frequency[i] == 0:
                continue
            
            frequency[i] -= 1
            
            # option 1 - add to an existing subsequence
            if subsequence[i-1] > 0:
                subsequence[i-1] -= 1
                subsequence[i] += 1
            
            # option 2 - create a new subsequence 
            elif frequency[i+1] and frequency[i+2]:
                frequency[i+1] -= 1
                frequency[i+2] -= 1
                subsequence[i+2] += 1
            
            else:
                return False
        
        return True        

效果：
Runtime: 494 ms, faster than 89.55% of Python online submissions for Split Array into Consecutive Subsequences.
Memory Usage: 14.8 MB, less than 46.27% of Python online submissions for Split Array into Consecutive Subsequences.

reference：
https://leetcode.com/problems/split-array-into-consecutive-subsequences/discuss/2446738/Python-524ms-98.3-Faster-Multiple-solutions-94-memory-efficient

"""
***********************解法二分割线***********************
"""
class Solution(object):
    def isPossible(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums)<3:
            return False
        
        heap=[]
        
        for x in nums:
            
            while heap and (x>(heap[0][0]+1)):
                length= heapq.heappop(heap)
                if length[1]<3:
                    return False
            
            if heap and x==(heap[0][0]+1):
                length=heapq.heappop(heap)
                heapq.heappush(heap,(x,length[1]+1))
            else:
                heapq.heappush(heap,(x,1))
        
        while heap:
            if heapq.heappop(heap)[1]<3:
                return False
        
        return True        

效果：
Runtime: 1123 ms, faster than 41.79% of Python online submissions for Split Array into Consecutive Subsequences.
Memory Usage: 15 MB, less than 26.87% of Python online submissions for Split Array into Consecutive Subsequences.

reference:
https://leetcode.com/problems/split-array-into-consecutive-subsequences/discuss/2449886/Python-solution-using-Heap


"""
--------------------------------------题目分割线----------------------------------------------
"""
675. Cut Off Trees for Golf Event <hard>
输入：
int[int[]]
输出：
int

class Solution(object):
    def cutOffTree(self, forest):
        """
        :type forest: List[List[int]]
        :rtype: int
        """
        forest.append([0] * len(forest[0]))
        for row in forest: row.append(0)
        # distance
        def distance(i, j, I, J):
            manhattan = abs(i - I) + abs(j - J)
            detour = 0
            good, bad = [(i, j)], []
            visited = set()
            while True:
                if not good:
                    good, bad = bad, []
                    detour += 1
                i, j = good.pop()
                if i == I and j == J: return manhattan + detour * 2
                if (i, j) in visited: continue
                visited.add((i, j))
                for i, j, closer in ((i-1, j, i > I), (i+1, j, i < I), (i, j+1, j < J), (i, j-1, j > J)):
                    if forest[i][j]:
                        (good if closer else bad).append((i, j))
                    
        trees = [(height, r, c) for r, row in enumerate(forest) for c, height in enumerate(row) if forest[r][c] > 1]
        # check
        queue = [(0, 0)]
        reached = set()
        reached.add((0, 0))
        while queue:
            r, c = queue.pop()
            for dr, dc in ((-1, 0), (1, 0), (0, -1), (0, 1)):
                row, col = r + dr, c + dc
                if forest[row][col] and (row, col) not in reached:
                    queue.append((row, col))
                    reached.add((row,col))
        if not all([(i, j) in reached for (height, i, j) in trees]): return -1
        trees.sort()
        return sum([distance(i, j, I, J) for (_, i, j), (_, I, J) in zip([(0, 0, 0)] + trees, trees)])
        

效果：
Runtime: 6625 ms, faster than 88.24% of Python online submissions for Cut Off Trees for Golf Event.
Memory Usage: 14.4 MB, less than 8.82% of Python online submissions for Cut Off Trees for Golf Event.

reference:
https://leetcode.com/problems/cut-off-trees-for-golf-event/discuss/1204000/Python-normal-and-priority-BFS-faster-than-99-and-faster-th



"""
--------------------------------------题目分割线----------------------------------------------
"""
632. Smallest Range Covering Elements from K Lists <hard>
输入：
int[int[]]
输出：
int

class Solution(object):
    def smallestRange(self, nums):
        """
        :type nums: List[List[int]]
        :rtype: List[int]
        """
        pq = []
        rangeStart,rangeEnd = float("-inf"),float("inf")
        max_number = float("-inf")
        for i in range(len(nums)):
            heapq.heappush(pq,(nums[i][0],0,nums[i]))
            max_number = max(max_number,nums[i][0])
            
        while len(pq)==len(nums):
            
            val,listindex,cl = heapq.heappop(pq)
            if max_number - val < rangeEnd - rangeStart:
                rangeStart = val
                rangeEnd = max_number
                
            if len(cl) > listindex+1:
                heapq.heappush(pq,(cl[listindex+1],listindex+1,cl))
                max_number = max(max_number,cl[listindex+1])
        return [rangeStart,rangeEnd]
        

效果：
Runtime: 245 ms, faster than 79.41% of Python online submissions for Smallest Range Covering Elements from K Lists.
Memory Usage: 18.6 MB, less than 76.47% of Python online submissions for Smallest Range Covering Elements from K Lists.

reference:
https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/discuss/1654725/Python-Heap-solution


"""
--------------------------------------题目分割线----------------------------------------------
"""
1405. Longest Happy String <medium>
输入：
int
int
int
输出：
str

class Solution(object):
    def longestDiverseString(self, a, b, c):
        """
        :type a: int
        :type b: int
        :type c: int
        :rtype: str
        """
        res = ''
        while a > 0 or b > 0 or c > 0:
            choices = []
            if a and (len(res) < 2 or res[-1] != 'a' or res[-2] != 'a'):
                heapq.heappush(choices, (-a, 'a'))
            if b and (len(res) < 2 or res[-1] != 'b' or res[-2] != 'b'):
                heapq.heappush(choices, (-b, 'b'))
            if c and (len(res) < 2 or res[-1] != 'c' or res[-2] != 'c'):
                heapq.heappush(choices, (-c, 'c'))
            if not choices:
                break            
            res += choices[0][1]
            a -= choices[0][1] == 'a'
            b -= choices[0][1] == 'b'
            c -= choices[0][1] == 'c'           
        return res
        

效果：
Runtime: 34 ms, faster than 45.87% of Python online submissions for Longest Happy String.
Memory Usage: 13.5 MB, less than 51.38% of Python online submissions for Longest Happy String.

reference:
https://leetcode.com/problems/longest-happy-string/discuss/2769358/Explained-Longest-Happy-String-Of-Lenght-K-Python


"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：



