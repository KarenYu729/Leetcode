week 7
Nov 2



"""
--------------------------------------题目分割线----------------------------------------------
"""
912. Sort an Array <medium>
输入：
int[]
输出：
int[]

class Solution(object):
    def sortArray(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        heap = []
        for num in nums:
            heapq.heappush(heap, num)
        
        res = []
        while heap:
            num = heapq.heappop(heap)
            res.append(num)
        return res
        

效果：
Runtime: 3136 ms, faster than 54.97% of Python online submissions for Sort an Array.
Memory Usage: 22.2 MB, less than 61.83% of Python online submissions for Sort an Array.


"""
--------------------------------------题目分割线----------------------------------------------
"""
973. K Closest Points to Origin <medium>
输入：
int[int[]]
int
输出：
int[int[]]

class Solution(object):
    def kClosest(self, points, k):
        """
        :type points: List[List[int]]
        :type k: int
        :rtype: List[List[int]]
        """
        heap = []
        for point in points:
            heapq.heappush(heap, (sqrt(point[0]**2+point[1]**2), point))
        res = []
        while k>0:
            dist, point = heapq.heappop(heap)
            res.append(point)
            k-=1
        
        return res
        

效果：
Runtime: 1442 ms, faster than 58.61% of Python online submissions for K Closest Points to Origin.
Memory Usage: 20.2 MB, less than 44.53% of Python online submissions for K Closest Points to Origin.



"""
--------------------------------------题目分割线----------------------------------------------
"""
1046. Last Stone Weight <easy>
输入：
int[]
输出：
int

class Solution(object):
    def lastStoneWeight(self, stones):
        """
        :type stones: List[int]
        :rtype: int
        """
        heap = []
        for stone in stones:
            heapq.heappush(heap, (-stone, stone))
        
        while len(heap)>1:
            weight1, first_stone = heapq.heappop(heap)
            weight2, second_stone = heapq.heappop(heap)
            
            if first_stone == second_stone:
                continue
            else:
                new_stone = first_stone-second_stone
                heapq.heappush(heap, (-new_stone, new_stone))
        
        if len(heap)==0:
            return 0
        else:
            w, s = heapq.heappop(heap)
            return s
        

效果：
Runtime: 37 ms, faster than 37.49% of Python online submissions for Last Stone Weight.
Memory Usage: 13.7 MB, less than 7.78% of Python online submissions for Last Stone Weight.



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：



"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：




"""
--------------------------------------题目分割线----------------------------------------------
"""

输入：

输出：



        

效果：


