week 7
Nov 2



"""
--------------------------------------题目分割线----------------------------------------------
"""
912. Sort an Array <medium>
输入：
int[]
输出：
int[]

class Solution(object):
    def sortArray(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        heap = []
        for num in nums:
            heapq.heappush(heap, num)
        
        res = []
        while heap:
            num = heapq.heappop(heap)
            res.append(num)
        return res
        

效果：
Runtime: 3136 ms, faster than 54.97% of Python online submissions for Sort an Array.
Memory Usage: 22.2 MB, less than 61.83% of Python online submissions for Sort an Array.


"""
--------------------------------------题目分割线----------------------------------------------
"""
973. K Closest Points to Origin <medium>
输入：
int[int[]]
int
输出：
int[int[]]

class Solution(object):
    def kClosest(self, points, k):
        """
        :type points: List[List[int]]
        :type k: int
        :rtype: List[List[int]]
        """
        heap = []
        for point in points:
            heapq.heappush(heap, (sqrt(point[0]**2+point[1]**2), point))
        res = []
        while k>0:
            dist, point = heapq.heappop(heap)
            res.append(point)
            k-=1
        
        return res
        

效果：
Runtime: 1442 ms, faster than 58.61% of Python online submissions for K Closest Points to Origin.
Memory Usage: 20.2 MB, less than 44.53% of Python online submissions for K Closest Points to Origin.



"""
--------------------------------------题目分割线----------------------------------------------
"""
1046. Last Stone Weight <easy>
输入：
int[]
输出：
int

class Solution(object):
    def lastStoneWeight(self, stones):
        """
        :type stones: List[int]
        :rtype: int
        """
        heap = []
        for stone in stones:
            heapq.heappush(heap, (-stone, stone))
        
        while len(heap)>1:
            weight1, first_stone = heapq.heappop(heap)
            weight2, second_stone = heapq.heappop(heap)
            
            if first_stone == second_stone:
                continue
            else:
                new_stone = first_stone-second_stone
                heapq.heappush(heap, (-new_stone, new_stone))
        
        if len(heap)==0:
            return 0
        else:
            w, s = heapq.heappop(heap)
            return s
        

效果：
Runtime: 37 ms, faster than 37.49% of Python online submissions for Last Stone Weight.
Memory Usage: 13.7 MB, less than 7.78% of Python online submissions for Last Stone Weight.



"""
--------------------------------------题目分割线----------------------------------------------
"""
2099. Find Subsequence of Length K With the Largest Sum <easy>
输入：
int[]
int
输出：
int[]

class Solution(object):
    def maxSubsequence(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        heap = []
        for idx, num in enumerate(nums):
            heapq.heappush(heap, (num, idx))
        delK = len(nums)-k
        while delK>0:
            weight, num = heapq.heappop(heap)
            delK-=1
        heap.sort(key = lambda x: x[1])
        return [x[0] for x in heap]
        

效果：
Runtime: 32 ms, faster than 100.00% of Python online submissions for Find Subsequence of Length K With the Largest Sum.
Memory Usage: 14 MB, less than 9.65% of Python online submissions for Find Subsequence of Length K With the Largest Sum.

reference：
https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum/discuss/1635474/Python-optimized-solution-with-heap
https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum/discuss/2443793/Yet-another-Python-solutuion-O(nlog(k))



"""
--------------------------------------题目分割线----------------------------------------------
"""
502. IPO <heard>
输入：
int
int
int[]
int[]
输出：
int

class Solution(object):
    def findMaximizedCapital(self, k, w, profits, capital):
        """
        :type k: int
        :type w: int
        :type profits: List[int]
        :type capital: List[int]
        :rtype: int
        """
        maxProfitsHeap = []
        minCapitalHeap = []
        
        for i in range(len(capital)):
            heapq.heappush(minCapitalHeap, (capital[i], i))
        
        capitalStorage = w
        
        while k>0:
            while minCapitalHeap and minCapitalHeap[0][0]<=capitalStorage:
                projectCap, i = heapq.heappop(minCapitalHeap)
                
                heapq.heappush(maxProfitsHeap, (-profits[i], i))
            if not maxProfitsHeap:
                break
            capitalStorage+=(-1)*heapq.heappop(maxProfitsHeap)[0]
            k-=1
        
        return capitalStorage
        

效果：
Runtime: 2228 ms, faster than 63.04% of Python online submissions for IPO.
Memory Usage: 37.7 MB, less than 86.96% of Python online submissions for IPO.

reference:
https://leetcode.com/problems/ipo/discuss/1343168/Python-Two-heaps-greedy-solution-with-simple-explanation

