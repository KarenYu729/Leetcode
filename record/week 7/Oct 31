week 7
Oct 31



"""
--------------------------------------题目分割线----------------------------------------------
"""
373. Find K Pairs with Smallest Sums <medium>
输入：
int[]
int[]
int
输出：
int[int[]]

class Solution(object):
    def kSmallestPairs(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[List[int]]
        """
        hq = []
        heapq.heapify(hq)
        
        # add all the pairs that we can form with
        # all the (first k) items in nums1 with the first
        # item in nums2
        for i in range(min(len(nums1), k)):
            heapq.heappush(hq, (nums1[i]+nums2[0], nums1[i], nums2[0], 0))

        # since the smallest pair will
        # be the first element from both nums1 and nums2. We'll
        # start with that and then subsequently, we'll pop it out
        # from the heap and also insert the pair of the current
        # element from nums1 with the next nums2 element
        out = []
        while k > 0 and hq:
            _, n1, n2, idx = heapq.heappop(hq)
            out.append((n1, n2))
            if idx + 1 < len(nums2):
                # the heap will ensure that the smallest element
                # based on the sum will remain on top and the
                # next iteration will give us the pair we require
                heapq.heappush(hq, (n1+nums2[idx+1], n1, nums2[idx+1], idx+1))
            k -= 1
                
        return out
        

效果：
Runtime: 2381 ms, faster than 45.78% of Python online submissions for Find K Pairs with Smallest Sums.
Memory Usage: 29.3 MB, less than 97.33% of Python online submissions for Find K Pairs with Smallest Sums.

reference:
https://leetcode.com/problems/find-k-pairs-with-smallest-sums/discuss/1701122/Python-Simple-heap-solution-explained



"""
--------------------------------------题目分割线----------------------------------------------
"""
168. Excel Sheet Column Title <easy>
输入：
int
输出：
str

class Solution(object):
    def convertToTitle(self, columnNumber):
        """
        :type columnNumber: int
        :rtype: str
        """
        # Create an empty string for storing the characters...
        output = ""
        # Run a while loop while columnNumber is positive...
        while columnNumber > 0:
            # Subtract 1 from columnNumber and get current character by doing modulo of columnNumber by 26...
            output = chr(ord('A') + (columnNumber - 1) % 26) + output
            # Divide columnNumber by 26...
            columnNumber = (columnNumber - 1) // 26
        # Return the output string.
        return output
        

效果：
Runtime: 24 ms, faster than 65.17% of Python online submissions for Excel Sheet Column Title.
Memory Usage: 13.3 MB, less than 84.83% of Python online submissions for Excel Sheet Column Title.

reference:
https://leetcode.com/problems/excel-sheet-column-title/discuss/2448578/Easy-oror-0-ms-oror-100-oror-Fully-Explained-(Java-C%2B%2B-Python-Python3)



"""
--------------------------------------题目分割线----------------------------------------------
"""
171. Excel Sheet Column Number <easy>
输入：
str
输出：
int

class Solution(object):
    def titleToNumber(self, columnTitle):
        """
        :type columnTitle: str
        :rtype: int
        """
        s = columnTitle[::-1]
        return sum([(ord(s[i]) - 64) * (26 ** i) for i in range(len(s))])
        

效果：
Runtime: 55 ms, faster than 5.62% of Python online submissions for Excel Sheet Column Number.
Memory Usage: 13.4 MB, less than 78.23% of Python online submissions for Excel Sheet Column Number.

reference:
https://leetcode.com/problems/excel-sheet-column-number/



"""
--------------------------------------题目分割线----------------------------------------------
"""
506. Relative Ranks <easy>
输入：
int[]
输出：
str[]

class Solution(object):
    def findRelativeRanks(self, score):
        """
        :type score: List[int]
        :rtype: List[str]
        """
        heap = []
        for i in range(len(score)):
            heapq.heappush(heap, (score[i], i))
        print(heap)
        
        rank = len(score)
        while heap:
            scr, idx = heapq.heappop(heap)
            if rank > 3:
                score[idx] = str(rank)
            elif rank == 3:
                score[idx] = "Bronze Medal"
            elif rank == 2:
                score[idx] = "Silver Medal"
            elif rank == 1:
                score[idx] = "Gold Medal"
            rank-=1
        return score     
        

效果：
Runtime: 185 ms, faster than 48.31% of Python online submissions for Relative Ranks.
Memory Usage: 14.5 MB, less than 28.02% of Python online submissions for Relative Ranks.




"""
--------------------------------------题目分割线----------------------------------------------
"""
658. Find K Closest Elements <medium>
输入：
int[]
int
int
输出：
int[]

class Solution(object):
    def findClosestElements(self, arr, k, x):
        """
        :type arr: List[int]
        :type k: int
        :type x: int
        :rtype: List[int]
        """
        heap = []
        for i in range(len(arr)):
            heapq.heappush(heap, (abs(arr[i]-x), arr[i]))
        
        res = []
        while k>0:
            res.append(heapq.heappop(heap)[1])
            k-=1
        res.sort()
        return res
        

效果：
Runtime: 956 ms, faster than 7.60% of Python online submissions for Find K Closest Elements.
Memory Usage: 15.6 MB, less than 12.01% of Python online submissions for Find K Closest Elements.




"""
--------------------------------------题目分割线----------------------------------------------
"""
692. Top K Frequent Words <medium>
输入：
str[]
int
输出：
str[]

class Solution(object):
    def topKFrequent(self, words, k):
        """
        :type words: List[str]
        :type k: int
        :rtype: List[str]
        """
        wordCnt = Counter(words)
        
        heap = []
        for i in wordCnt:
            heapq.heappush(heap, (-wordCnt[i], i))
        
        res=[]
        while k>0:
            res.append(heapq.heappop(heap)[1])
            k-=1
        
        return res
        

效果：
Runtime: 71 ms, faster than 70.65% of Python online submissions for Top K Frequent Words.
Memory Usage: 13.7 MB, less than 19.99% of Python online submissions for Top K Frequent Words.

reference：
https://leetcode.com/problems/top-k-frequent-words/discuss/2723147/Heap-Hashmap-Solution-O(klogN)-or-Video
这里有一个很聪明的是，要排最大堆，就把frequency乘上-1




